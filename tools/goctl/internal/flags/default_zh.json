{
  "goctl": {
    "short": "go-zero 代码生成脚手架",
    "long": "go-zero 代码生成脚手架，支持生成 HTTP，gRPC，数据库模型代码\n\nGitHub地址: https://github.com/zeromicro/go-zero\n官网:   https://go-zero.dev",
    "api": {
      "short": "HTTP 代码生成指令",
      "o": "指定 api 模板文件的输出文件名称",
      "home": "{{.global.home}}",
      "remote": "{{.global.remote}}",
      "branch": "{{.global.branch}}",
      "api": "api 文件",
      "dir": "代码输出目录",
      "dart": {
        "short": "通过 api 文件生成 dart 代码",
        "dir": "{{.goctl.api.dir}}",
        "api": "{{.goctl.api.api}}",
        "legacy": "使用旧版 dart 代码生成器",
        "hostname": "指定主机名",
        "scheme": "指定协议"
      },
      "doc": {
        "short": "通过 api 文件生成 api markdown 文档",
        "dir": "{{.goctl.api.dir}}",
        "o": "指定 api 文档的输出文件名称"
      },
      "format": {
        "short": "格式化 api 文件",
        "dir": "{{.goctl.api.dir}}",
        "iu": "格式化 api 文件时，是否忽略未使用的类型",
        "stdin": "指定待格式化的数据源为标准输入，按下 \"ctrl + d\" 终止进程",
        "declare": "跳过类型检查"
      },
      "go": {
        "short": "通过 api 文件生成 go 代码",
        "dir": "{{.goctl.api.dir}}",
        "api": "{{.goctl.api.api}}",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}",
        "style": "{{.global.style}}"
      },
      "new": {
        "short": "快速创建一个 go-zero 风格的 HTTP 服务",
        "Example": "goctl api new [options] service-name",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}",
        "style": "{{.global.style}}"
      },
      "validate": {
        "short": "验证 api 文件是否符合规范",
        "api": "{{.goctl.api.api}}"
      },
      "kt": {
        "short": "通过 api 文件生成 kotlin 代码",
        "dir": "{{.goctl.api.dir}}",
        "api": "{{.goctl.api.api}}",
        "pkg": "指定生成的 kotlin 代码包名"
      },
      "plugin": {
        "short": "通过 api 插件生成代码",
        "plugin": "The plugin file",
        "dir": "{{.goctl.api.dir}}",
        "api": "{{.goctl.api.api}}",
        "style": "{{.global.style}}"
      },
      "ts": {
        "short": "通过 api 文件生成 typescript 代码",
        "dir": "{{.goctl.api.dir}}",
        "api": "{{.goctl.api.api}}",
        "caller": "The web api caller",
        "unwrap": "是否禁用{{}}对包名的修饰"
      }
    },
    "bug": {
      "short": "快速提交 GitHub Issue"
    },
    "docker": {
      "short": "生成 Dockerfile",
      "exe": "可执行文件名称",
      "go": "main 函数路径",
      "base": "基础镜像",
      "port": "需要暴露的端口值",
      "home": "{{.global.home}}",
      "remote": "{{.global.remote}}",
      "branch": "{{.global.branch}}",
      "version": "镜像版本",
      "tz": "时区"
    },
    "kube": {
      "short": "生成 K8s yaml 文件",
      "deploy": {
        "short": "生成 deployment yaml 文件",
        "name": "deployment 名称 (必填)",
        "namespace": "deployment 域名空间 (必填)",
        "image": "deployment 镜像 (必填)",
        "secret": "镜像拉取密钥",
        "requestCpu": "部署所需 cpu 资源大小",
        "requestMem": "部署所需内存资源大小",
        "limitCpu": "部署所需 cpu 资源大小上限",
        "limitMem": "部署所需内存资源大小上限",
        "o": "yaml 文件输出目录 (required)",
        "replicas": "部署副本数",
        "revisions": "需要保留部署历史版本数，便于回滚",
        "port": "监听端口 (required)",
        "nodePort": "nodePort 暴露端口",
        "targetPort": "部署的 targetPort，默认值为 port 的值",
        "minReplicas": "最小副本数，用于扩缩容",
        "maxReplicas": "最大副本数，用于扩缩容",
        "imagePullPolicy": "镜像拉取策略, 默认策略是 IfNotPresent",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}",
        "serviceAccount": "部署的 serviceAccount"
      }
    },
    "env": {
      "short": "goctl 环境变量管理，依赖检测、安装",
      "write": "编辑 goctl 环境变量",
      "force": "静默安装",
      "verbose": "开启日志输出",
      "install": {
        "short": "goctl 依赖安装"
      },
      "check": {
        "short": "goctl 依赖检测",
        "install": "goctl 依赖检测依赖不存在是否自动安装"
      }
    },
    "model": {
      "short": "生成数据库模型代码",
      "dir": "代码输出目录",
      "mysql": {
        "short": "生成 MySQL 代码",
        "strict": "是否严格模式",
        "ignore-columns": "是否忽略可以自动填充值的列，如: create_time、update_time",
        "datasource": {
          "short": "从数据库连接生成 MySQL 代码",
          "url": "数据库连接地址，格式参考：root:password@tcp(127.0.0.1:3306)/database",
          "table": "需要生成的表，支持通配符",
          "cache": "是否生成带缓存的代码",
          "dir": "{{.goctl.model.dir}}",
          "style": "{{.global.style}}",
          "idea": "是否为 idea 插件生成代码，仅 intellij IDE 使用",
          "home": "{{.global.home}}",
          "remote": "{{.global.remote}}",
          "branch": "{{.global.branch}}"
        },
        "ddl": {
          "short": "通过 ddl 文件生成 MySQL 代码",
          "src": "ddl 文件地址",
          "dir": "{{.goctl.model.dir}}",
          "style": "{{.global.style}}",
          "cache": "是否生成带缓存的代码,",
          "idea": "是否为 idea 插件生成代码，仅 intellij IDE 使用",
          "home": "{{.global.home}}",
          "remote": "{{.global.remote}}",
          "branch": "{{.global.branch}}"
        }
      },
      "pg": {
        "short": "生成 PostgreSQL 代码",
        "datasource": {
          "short": "通过数据库连接生成 PostgreSQL 代码",
          "url": "数据库连接地址，格式参考：root:password@tcp(127.0.0.1:3306)/database",
          "table": "需要生成的表，支持通配符",
          "schema": "待生成的 schema 名称",
          "cache": "是否生成带缓存的代码",
          "dir": "{{.goctl.model.dir}}",
          "style": "{{.global.style}}",
          "idea": "是否为 idea 插件生成代码，仅 intellij IDE 使用",
          "strict": "{{.goctl.model.strict}}",
          "home": "{{.global.home}}",
          "remote": "{{.global.remote}}",
          "branch": "{{.global.branch}}"
        }
      },
      "mongo": {
        "short": "Mongo 代码生成",
        "type": "指定数据的 Golang 结构体名称",
        "cache": "是否生成带缓存的代码",
        "easy": "是否生成带集合名称的代码",
        "dir": "{{.goctl.model.dir}}",
        "style": "{{.global.style}}",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}"
      }
    },
    "migrate": {
      "short": "zeromicro 迁移升级指令",
      "long": "将 tal-tech 迁移升级到 zeromicro",
      "verbose": "是否开启日志输出",
      "version": "升级的目标版本号"
    },
    "quickstart": {
      "short": "快速开始 go-zero 项目",
      "service-type": "指定服务类型，目前支持 [mono：单体， micro：微服务] "
    },
    "rpc": {
      "short": "gRPC 相关代码生成",
      "o": "指定 proto 文件输出文件名称，如 greet.proto",
      "home": "{{.global.home}}",
      "remote": "{{.global.remote}}",
      "branch": "{{.global.branch}}",
      "new": {
        "short": "快速生成一个最小化 gRPC 代码服务",
        "style": "{{.global.style}}",
        "idea": "是否为 idea 插件生成代码，仅 intellij IDE 使用",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}",
        "verbose": "是否开启日志输出"
      },
      "template": {
        "short": "proto 文件生成，指令已废弃，推荐使用 goctl rpc -o 代替",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}"
      },
      "protoc": {
        "short": "gRPC 代码生成",
        "example": "goctl rpc protoc xx.proto --go_out=./pb --go-grpc_out=./pb --zrpc_out=.",
        "multiple": "是否支持多个 rpc service 生成（即：rpc 分组）",
        "zrpc_out": "gRPC 代码输出目录",
        "style": "{{.global.style}}",
        "home": "{{.global.home}}",
        "remote": "{{.global.remote}}",
        "branch": "{{.global.branch}}",
        "verbose": "是否开启日志输出"
      }
    },
    "template": {
      "short": "goctl 模板管理",
      "home": "goctl 文件路径",
      "init": {
        "short": "模板初始化",
        "home": "{{.goctl.template.home}}",
        "category": "模板分类，目前支持 [api,rpc,model,docker,kube]"
      },
      "clean": {
        "short": "模板清理",
        "home": "{{.goctl.template.home}}"
      },
      "update": {
        "short": "模板更新",
        "home": "{{.goctl.template.home}}",
        "category": "{{.goctl.template.category}}"
      },
      "revert": {
        "short": "模板回滚",
        "home": "{{.goctl.template.home}}",
        "category": "{{.goctl.template.category}}",
        "name": "模板文件名称"
      }
    },
    "upgrade": {
      "short": "goctl 升级指令"
    }
  },
  "global": {
    "home": "指令 goctl 目录，不能与 --remote 同时使用，如果同时设置，--remote 优先级更高",
    "remote": "模板所在 git 仓库地址，不能与 --home 同时使用，如果同时设置，--remote 优先级更高\n模板仓库结构需要满足一定规范，请参考 https://github.com/zeromicro/go-zero-template",
    "branch": "模板所在 git 仓库的分支，和 --remote 一起使用",
    "style": "文件名称格式化符号, 详情见文档 [https://github.com/zeromicro/go-zero/blob/master/tools/goctl/config/readme.md]"
  }
}