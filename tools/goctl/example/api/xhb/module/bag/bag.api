type FindUserFileRequest {
	Token           string   `path:"token"`
	Page            int      `form:"page,optional"`
	PageSize        int      `json:"pageSize,optional"`
	ClassroomId     string   `json:"classroomId,optional"`
	FileType        string   `json:"fileType,optional"`
	AllFileTypes    []string `json:"allFileTypes,optional"`
	Keyword         string   `json:"keyword,optional"`
	StorageType     string   `json:"storageType"`
	ParentDirectory string   `json:"parentDirectory,optional"`
}

type BagResponse {
	Id              string `json:"id,omitempty"`
	CreateTime      int64  `json:"createTime,omitempty"`
	Name            string `json:"name,omitempty"`
	FileType        string `json:"fileType,omitempty"`
	Folder          bool   `json:"folder"`
	FileExtension   string `json:"fileExtension,omitempty"`
	ParentDirectory string `json:"parentDirectory,omitempty"`
	Sender          string `json:"sender,omitempty"`
	SenderName      string `json:"senderName,omitempty"`
	ClassroomId     string `json:"classroomId,omitempty"`
	StorageType     string `json:"storageType,omitempty"`
	Url             string `json:"url,omitempty"`
	CoverUrl        string `json:"coverUrl,omitempty"`
	Size            int    `json:"size"`
}

type FindUserFileResponse {
	TotalSize     int            `json:"totalSize"`
	HasMore       bool           `json:"hasMore"`
	BagFiles      []*BagResponse `json:"bagFiles"`
	Size          int            `json:"size"`
	NextPage      int            `json:"nextPage"`
	LastTimestamp int            `json:"lastTimestamp"`
}

type QueryUserFilesRequest {
	Token           string `path:"token"`
	ParentDirectory string `form:"parentDirectory,optional"`
	Page            int    `form:"page,optional"`
	PageSize        int    `form:"pageSize,optional"`
}

type QueryUserFilesResponse {
	TotalSize     int            `json:"totalSize"`
	HasMore       bool           `json:"hasMore"`
	BagFiles      []*BagResponse `json:"bagFiles"`
	UsedSize      int            `json:"usedSize"`
	MaxSize       int            `json:"maxSize"`
	NextPage      int            `json:"nextPage"`
	LastTimestamp int            `json:"lastTimestamp"`
}

type UploadFileRequest {
	Name            string `json:"name"`
	Url             string `json:"url,optional"`
	CoverUrl        string `json:"coverUrl,optional"`
	Folder          bool   `json:"folder,optional"`
	FileExtension   string `json:"fileExtension,optional"`
	ParentDirectory string `json:"parentDirectory,optional"`
	ClassroomId     string `json:"classroomId,optional"`
	Size            int    `json:"size,optional"`
	Token           string `path:"token"`
}

type UploadFileCommon {
	Name            string `json:"name"`
	Url             string `json:"url,optional"`
	CoverUrl        string `json:"coverUrl,optional"`
	Folder          bool   `json:"folder,optional"`
	FileExtension   string `json:"fileExtension,optional"`
	ParentDirectory string `json:"parentDirectory,optional"`
	ClassroomId     string `json:"classroomId,optional"`
	Size            int    `json:"size,optional"`
}

type BatchDeleteUserFileRequest {
	Token   string   `path:"token"`
	FileIds []string `json:"fileIds"`
}

type BagFileView {
	UsedSize int64 `json:"usedSize"`
	MaxSize  int   `json:"maxSize"`
}

type RenameRequest {
	Token  string `path:"token"`
	FileID string `json:"fileId"`
	Name   string `json:"name"`
}

type RenameResponse {
	Result bool `json:"successful"`
}

type FindBagFileRequest {
	Token           string   `path:"token"`
	Page            int      `form:"page,optional"`
	PageSize        int      `json:"pageSize,optional"`
	ClassroomId     string   `json:"classroomId,optional"`
	FileType        string   `json:"fileType,optional"`
	AllFileTypes    []string `json:"allFileTypes,optional"`
	Keyword         string   `json:"keyword,optional"`
	StorageType     string   `json:"storageType"`
	ParentDirectory string   `json:"parentDirectory,optional"`
}

type FindClassroomFilesResponse {
	TotalSize     int            `json:"totalSize"`
	HasMore       bool           `json:"hasMore"`
	BagFiles      []*BagResponse `json:"bagFiles"`
	Size          int            `json:"size"`
	NextPage      int            `json:"nextPage"`
	LastTimestamp int            `json:"lastTimestamp"`
}

type QueryClassroomFilesRequest {
	Token           string `path:"token"`
	ClassroomId     string `path:"classroomId"`
	ParentDirectory string `form:"parentDirectory,optional"`
	Page            int    `form:"page,optional"`
	PageSize        int    `form:"pageSize,optional"`
}

type QueryClassroomFilesResponse {
	TotalSize     int            `json:"totalSize"`
	HasMore       bool           `json:"hasMore"`
	BagFiles      []*BagResponse `json:"bagFiles"`
	UsedSize      int            `json:"usedSize"`
	MaxSize       int            `json:"maxSize"`
	NextPage      int            `json:"nextPage"`
	LastTimestamp int            `json:"lastTimestamp"`
}

type FileBatchDeleteRequest {
	Token   string   `path:"token"`   // 用户
	FileIds []string `json:"fileIds"` // 要移动的文件或文件夹
}

type FolderRequest {
	// 类型 班级文件/用户文件
	StorageType     string `form:"storageType"`
	ClassroomId     string `form:"classroomId,optional"`
	ParentDirectory string `form:"parentDirectory,optional"`
}

type FolderResponse {
	BagFiles []*BagResponse `json:"bagFiles,omitempty"`
}

type FileBatchRequest {
	// 用户
	Token string `path:"token"`
	// 类型 班级文件/用户文件
	StorageType string `json:"storageType,optional"`
	// 要移动的文件或文件夹
	FileIds []string `json:"fileIds"`
	// 移动的目的地 为空表示移动到根目录
	Directory string `json:"directory,optional"`
	// 班级ID
	ClassroomId string `json:"classroomId,optional"`
}

type FileBatchResponse {
	ErrFileIds []string `json:"errFileIds,omitempty"`
}

type batchUserStorageRequest {
	Files []*UploadFileCommon `json:"files"`
	Token string              `path:"token"`
}
type batchUserStorageResponse {
	BagResponse []*BagResponse `json:"bagResponse"`
}

type TrashListReq {
	// 用户token
	Token  string `json:"token"`
	Limit  int    `json:"limit,optional"`
	Cursor int64  `json:"cursor,optional"`
}

type trashFile {
	// 回收站文件id
	Id string `json:"id,omitempty"`
	// 文件名
	Name string `json:"name,omitempty"`
	// 文件类型
	FileType string `json:"fileType,omitempty"`
	// 文件是否为文件夹
	Folder bool `json:"folder"`
	// 文件扩展名
	FileExtension string `json:"fileExtension,omitempty"`
	// 文件父目录id
	ParentDirectory string `json:"parentDirectory,omitempty"`
	// 文件大小
	Size int `json:"size"`
	// 文件来源
	Source string `json:"source"`
	// 文件删除者
	Deleter string `json:"deleter"`
	// 文件删除时间
	DeleteTime int64 `json:"deleteTime"`
	// 文件封面
	CoverUrl string `json:"coverUrl,omitempty"`
}

type TrashListResponse {
	Cursor     int64        `json:"cursor"`
	HasMore    bool         `json:"hasMore"`
	TrashFiles []*trashFile `json:"trashFile"`
}

type RecoverTrashFilesRequest {
	// 用户token
	Token string `json:"token"`
	// 要恢复的文件列表
	Files []string `json:"files"`
}

type RecoverTrashFilesResponse {
}

type DeleteTrashFilesRequest {
	// 要删除的文件列表
	Files []string `json:"files"`
	// 用户token
	Token string `json:"token"`
}

type DeleteTrashFilesResponse {
}

type CreateLinkRequest {
	// 用户token
	Token string `json:"token"`
	// 文件id
	FileId string `json:"fileId"`
	// 过期类型 [week month forever]
	ExpiredType string `json:"expiredType"`
	// 文件操作类型 [read edit]
	OperationType string `json:"operationType"`
	// 链接类型 [bag classroom]
	LinkType string `json:"linkType"`
	// 成员类型 [classmate everyone]
	MemberType string `json:"memberType"`
}

type CreateLinkResponse {
	LinkId        string `json:"linkId"`
	OperationType string `json:"operationType,omitempty"`
	MemberType    string `json:"memberType"`
	ExpiredType   string `json:"expiredType"`
}

type GetFileLinkRequest {
	Token    string `json:"token"`
	FileId   string `json:"fileId"`
	LinkType string `json:"linkType"`
}

type GetFileLinkResponse {
	LinkId        string `json:"linkId"`
	OperationType string `json:"operationType,omitempty"`
	MemberType    string `json:"memberType"`
	ExpiredType   string `json:"expiredType"`
	Has           bool   `json:"has"`
}

type EditLinkRequest {
	Token         string `json:"token"`
	LinkId        string `json:"linkId"`
	OperationType string `json:"operationType,optional"`
	MemberType    string `json:"memberType,optional"`
	ExpiredType   string `json:"expiredType,optional"`
	// 链接状态 [normal canceled]
	Status string `json:"status,optional"`
}

type EditLinkResponse {
}

type ResetLinkRequest {
	Token  string `json:"token"`
	LinkId string `json:"linkId"`
}

type ResetLinkResponse {
	LinkId        string `json:"linkId"`
	OperationType string `json:"operationType,omitempty"`
	MemberType    string `json:"memberType"`
	ExpiredType   string `json:"expiredType"`
}

type GetLinkByTokenRequest {
	LinkId string `json:"linkId"`
	Token  string `json:"token"`
}

type GetLinkByTokenResponse {
	FileId            string `json:"fileId"`
	ClassroomId       string `json:"classroomId"`
	ParentDirectoryId string `json:"parentDirectoryId"`
	FileName          string `json:"fileName"`
}

type GetLinkRequest {
	LinkId string `json:"linkId"`
}

type GetLinkResponse {
	OperationType string `json:"operationType,omitempty"`
	MemberType    string `json:"memberType"`
	ExpiredTime   int64  `json:"expiredTime"`
	Title         string `json:"title"`
	FileType      string `json:"fileType,omitempty"`
	FileExtension string `json:"fileExtension,omitempty"`
	Size          int    `json:"size"`
	Source        string `json:"source"`
}

service bag-api {
	@doc(
		summary: 更新用户最新查看消息时间
	)
	@server(
		handler: FindUserFileHandler
	)
	post /bag/findUserFile/:token (FindUserFileRequest) returns (FindUserFileResponse)
	
	@doc(
		summary: 查询用户晓书包文件
	)
	@server(
		handler: QueryUserFilesHandler
	)
	get /bag/queryUserFiles/:token (QueryUserFilesRequest) returns (QueryUserFilesResponse)
	
	@doc(
		summary: 上传晓书包
	)
	@server(
		handler: UploadUserFileHandler
	)
	post /bag/uploadUserFile/:token (UploadFileRequest) returns (BagResponse)
	
	@doc(
		summary: 用户删除晓书包文件
	)
	@server(
		handler: BatchDeleteUserFileHandler
	)
	post /bag/deleteUserFile/:token (BatchDeleteUserFileRequest) returns (BagFileView)
	
	@doc(
		summary: 用户文件重命名
	)
	@server(
		handler: RenameUserFileHandler
	)
	post /bag/renameUserFile/:token (RenameRequest) returns (RenameResponse)
	
	@doc(
		summary: 查询班级文件
	)
	@server(
		handler: FindClassroomBagFileHandler
	)
	post /bag/findClassroomFile/:token (FindBagFileRequest) returns (FindClassroomFilesResponse)
	
	@doc(
		summary: 查询班级文件
	)
	@server(
		handler: QueryClassroomFilesHandler
	)
	get /bag/queryClassroomFiles/:token/:classroomId (QueryClassroomFilesRequest) returns (QueryClassroomFilesResponse)
	
	@doc(
		summary: 上传班级文件
	)
	@server(
		handler: UploadClassroomFileHandler
	)
	post /bag/uploadClassroomFile/:token (UploadFileRequest) returns (QueryClassroomFilesResponse)
	
	@doc(
		summary: 批量删除班级文件
	)
	@server(
		handler: BatchDeleteClassroomFileHandler
	)
	post /bag/deleteClassroomFile/:token (FileBatchDeleteRequest) returns (BagFileView)
	
	@doc(
		summary: 班级文件重命名
	)
	@server(
		handler: RenameClassroomFileHandler
	)
	post /bag/renameClassroomFile/:token (RenameRequest) returns (RenameResponse)
	
	@doc(
		summary: 获取指定文件夹下的所有文件夹/文件移动时使用
	)
	@server(
		handler: GetFolderFilesHandler
	)
	get /bag/folder (FolderRequest) returns (FolderResponse)
	
	@doc(
		summary: 用户移动晓书包文件
	)
	@server(
		handler: BatchMoveHandler
	)
	post /bag/batch/move/file/:token (FileBatchRequest) returns (FileBatchResponse)
	
	@doc(
		summary: 获取回收站列表信息
	)
	@server(
		handler: trashList
	)
	post /bag/trash/trashList (TrashListReq) returns (TrashListResponse)
	
	@doc(
		summary : 恢复回收站文件
	)
	@server(
		handler : recoverTrashFiles
	)
	post /bag/trash/recoverFiles (RecoverTrashFilesRequest) returns (RecoverTrashFilesResponse)
	
	@doc(
		summary : 删除回收站文件
	)
	@server(
		handler : deleteTrashFiles
	)
	post /bag/trash/deleteFiles (DeleteTrashFilesRequest) returns (DeleteTrashFilesResponse)
	
	@doc(
		summary : 创建文件外链
	)
	@server(
		handler : createLink
	)
	post /bag/link/createLink (CreateLinkRequest) returns (CreateLinkResponse)
	
	@doc(
		summary : 重置文件外链
	)
	@server(
		handler : resetLink
	)
	post /bag/link/resetLink (ResetLinkRequest) returns (ResetLinkResponse)
	
	@doc(
		summary : 编辑分享外链
	)
	@server(
		handler : editLink
	)
	post /bag/link/editLink (EditLinkRequest) returns (EditLinkResponse)
	
	@doc(
		summary : 根据文件获取分享链接
	)
	@server(
		handler : getFileLink
	)
	post /bag/link/getFileLink (GetFileLinkRequest) returns (GetFileLinkResponse)
	
	@doc(
		summary : 登录用户根据链接id获取链接信息
	)
	@server(
		handler : getLinkByToken
	)
	post /bag/link/getLinkByToken (GetLinkByTokenRequest) returns (GetLinkByTokenResponse)
	
	@doc(
		summary : 根据链接id获取链接信息
	)
	@server(
		handler : getLink
	)
	post /bag/link/getLink (GetLinkRequest) returns (GetLinkResponse)
	
	@doc(
		summary : 登录用户根据链接id获取链接信息(不鉴权)
	)
	@server(
		handler : getInternalLinkByToken
	)
	post /bag/link/getInternalLinkByToken (GetLinkByTokenRequest) returns (GetLinkByTokenResponse)
	
	@server(
		handler : batchUserStorage
	)
	post /bag/batchUserStorage/:token (batchUserStorageRequest) returns (batchUserStorageResponse)
}