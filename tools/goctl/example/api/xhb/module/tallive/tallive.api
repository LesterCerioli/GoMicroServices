syntax = "v1"

type (
    ImageRequest {
        // 原始图id
        Original string `json:"original,optional" filter:"badImage"`
        // 预览图
        Preview string `json:"preview,optional"`
        // 缩略图id
        Thumbnail string `json:"thumbnail,optional"`
        // 原图大小
        Size int `json:"size,optional"`
        // 高
        Height int `json:"height,optional"`
        // 宽
        Width int `json:"width,optional"`
    }

    AudioRequest {
        // 语音文件id
        Id string `json:"id" filter:"badAudio"`
        // 持续时间
        Duration int `json:"duration,optional"`
        // 文件后缀名
        FileExtension string `json:"fileExtension,optional"`
        // 文件大小
        Size int `json:"size,optional"`
        // 显示名称
        Name string `json:"name,optional"`
    }

    VideoRequest {
        // 视频标题
        Title string `json:"title,optional"`
        // 视频描述
        Desc string `json:"desc,optional" filter:"badWord"`
        // 视频封面url
        CoverUrl string `json:"coverUrl,optional"`
        // 视频url
        PlayUrl string `json:"playUrl" filter:"badVideo"`
        // 视频的播放时长
        PlayTime int `json:"playTime,optional"`
        // 视频回调标识字段[回调透传字段]
        MagicContext string `json:"magicContext,optional"`
        // 视频类型
        Type string `json:"type,optional"`
        // 视频高
        Height int `json:"height,optional"`
        // 视频宽
        Width int `json:"width,optional"`
    }

    AttrsRequest {
        Size string `json:"size,optional"`
    }

    AttachmentRequest {
        // 网络文件id
        Id string `json:"id,optional"`
        // 显示名称
        Name string `json:"name,optional"`
        // 附件mimeType
        MimeType string `json:"mimeType,optional"`
        // 其他属性
        Attrs *AttrsRequest `json:"attrs,optional"`
    }

    Receiver {
        ClassroomId string `json:"classroomId,optional"`
        Type string `json:"type"`
        ReceiverIds []string `json:"receiverIds,optional"`
        StudentIds []string `json:"studentIds,optional"`
        Additions []string `json:"additions,optional"`
    }

    Image {
        Original string `json:"original,omitempty"`
        Preview string `json:"preview,omitempty"`
        Thumbnail string `json:"thumbnail,omitempty"`
        Size int `json:"size,omitempty"`
        Height int `json:"height,omitempty"`
        Width int `json:"width,omitempty"`
    }

    Audio {
        Id string `json:"id,omitempty"`
        Duration int `json:"duration,omitempty"`
        FileExtension string `json:"fileExtension,omitempty"`
        Size int `json:"size,omitempty"`
        Name string `json:"name,omitempty"`
    }

    Link {
        // 5.0.0 add
        Url string `json:"url,omitempty"`
        Image string `json:"image,omitempty"`
        Title string `json:"title,omitempty"`
        Periodical string `json:"periodical,omitempty"`
        Type string `json:"type,omitempty"`
    }

    Attachment {
        Id string `json:"id"`
        Name string `json:"name,omitempty"`
        MimeType string `json:"mimeType,omitempty"`
        Attrs *Attrs `json:"attrs,omitempty"`
        Size string `json:"size,omitempty"` // 5.0.0 add
    }

    Attrs {
        // 5.0.0 after delete
        Size string `json:"size,omitempty"`
    }

    Video {
        PlayUrl string `json:"playUrl,omitempty"`
        Title string `json:"title,omitempty"`
        Desc string `json:"desc,omitempty"`
        CoverUrl string `json:"coverUrl,omitempty"`
        PlayTime int `json:"playTime,omitempty"`
        MagicContext string `json:"magicContext,omitempty"`
        Type string `json:"type,omitempty"`
        Height int `json:"height,omitempty"`
        Width int `json:"width,omitempty"`
    }

    ContentableView {
        // 标题
        Title string `json:"title,omitempty"`
        // 内容
        Content string `json:"content,omitempty"`
        // 图片id列表, 需要先上传
        Images []*Image `json:"images,omitempty"`
        // 语音上传后的对象
        Audio *Audio `json:"audio,omitempty"`
        // 上传后的视频
        Video *Video `json:"video,omitempty"`
        // 其他附件
        Attachments []*Attachment `json:"attachements,omitempty"`
        // 获取子消息类型的key：subNoticeType，获取子消息类型的value字符串具体消息类型type，比如："live"
        // 流程：
        // 如果extras存在subNoticeType键则为非普通通知，如果不存在subNoticeType键则为普通通知
        // 如果存在subNoticeType键，且有子消息类型type，则判断当前是否做了该type的逻辑兼容，如果没有兼容，则为未知消息类型
        // 如：在v1上添加了子消息类型live1，在v2上添加了子消息类型live2，那么v1版本应该能拿到live2子消息类型，但是v1版本
        // 并没有做逻辑兼容，因此属于未知消息类型。
        Extras map[string]interface{} `json:"extras,omitempty"`
    }

    NoticeView {
        ContentableView
    }

    Receipt {
        Total int `json:"total"`
        Receipted int `json:"receipted"`
        Feedbacked int `json:"feedbacked,omitempty"`
        Attitude string `json:"attitude,omitempty"`
        Received bool `json:"received,omitempty"`
        IsObserver bool `json:"isObserver,omitempty"`
    }

    PublishNoticeMessageView {
        ContentableView
        Id string `json:"id,omitempty"`                  // 消息id
        SenderId string `json:"senderId,omitempty"`
        CreateTime int64 `json:"createTime,omitempty"`
        Timestamp int64 `json:"timestamp,omitempty"`
        Category string `json:"category"`
        ClassroomId string `json:"classroomId,omitempty"`
        NoticeView *NoticeView `json:"notice,omitempty"` //5.0 add
        Receipt *Receipt `json:"receipt,omitempty"`
    }

    SimpleSenderView {
        Id string `json:"id"`
        // 显示名
        DisplayName string `json:"displayName,omitempty"`
        // 头像图片id
        Avatar string `json:"avatar,omitempty"`
    }

    ClassroomView {
        Id string `json:"id,omitempty"`
        Name string `json:"name,omitempty"`
        BadgeId string `json:"badgeId,omitempty"`
        BadgeType string `json:"badgeType,omitempty"`
        BgImage string `json:"bgImage,omitempty"`
    }
)
type (
    ScheduleReq {
        // 直播计划开始日期(包含当前)，format：yyyy-MM-dd
        StartDate string `json:"startDate"`
        // 直播计划结束日期(包含当前)，format：yyyy-MM-dd
        EndDate string `json:"endDate"`
    }

    DaySchedule {
        // 日期，format：yyyy-MM-dd
        Date string `json:"date"`
        // 是否有直播日程
        HavePlan bool `json:"havePlan"`
    }

    ScheduleReply {
        List []*DaySchedule `json:"list"`
    }

    ScheduleDetailReq {
        // 日期，format：yyyy-MM-dd
        Date string `json:"date"`
    }

    Playback {
        // 是否开启回放功能 true：开启回放，false：没有开启回放
        Enable bool `json:"enable"`
        // 回放是否已过期
        Expired bool `json:"expired"`
        Url string `json:"url"`
        // 回放状态 CREATING-生成中 CREATED-已生成,EXPIRED-已过期 NONE-无回放
        Status string `json:"status"`
        ExpireAt int64 `json:"expireAt"`
    }

    JwtToken {
        Token string `json:"token"`
        // 过期时间，format：yyyy-MM-dd HH:mm:ss
        ExpireAt string `json:"expireAt"`
    }

    User {
        // 晓黑板用户id
        UserId string `json:"userId"`
        // 直播云用户id
        LiveUserId int64 `json:"liveUserId"`
        // 直播云用户类型,teacher-教师，student-学生
        LiveUserType string `json:"liveUserType"`
        // 用户昵称
        Nickname string `json:"nickname"`
        Avatar string `json:"avatar"`
        Mobile string `json:"mobile"`
    }

    UserLiveEvent {
        // 直播id
        Id string `json:"id"`
        // 课节id
        LessonId int64 `json:"lessonId"`
        // 直播课程名称
        Name string `json:"name"`
        // 直播状态 READY：待开始，RUNNING：上课中，FINISHED：已结束，EXPIRED：已过期
        Status string `json:"status"`
        // 开始时间时间戳（单位：毫秒）
        StartTime int64 `json:"startTime"`
        // 结束时间时间戳（单位：毫秒）
        EndTime int64 `json:"endTime"`
        // 授课人信息
        Teacher *User `json:"teacher"`
        // 当前用户信息
        User *User `json:"user"`
        // 是否有时间冲突
        Intersected bool `json:"intersected"`
        // 回放信息
        Playback *Playback `json:"playback"`
        // 学科
        Subject string `json:"subject"`
        // 机构id
        InstitutionId string `json:"institutionId"`
    }

    LiveDetail {
        // 直播id
        Id string `json:"id"`
        // 课节id
        LessonId int64 `json:"lessonId"`
        // 验签token
        Token *JwtToken `json:"token"`
        // 直播课程名称
        Name string `json:"name"`
        // 直播状态 READY：待开始，RUNNING：上课中，FINISHED：已结束，EXPIRED：已过期
        Status string `json:"status"`
        // 开始时间时间戳（单位：毫秒）
        StartTime int64 `json:"startTime"`
        // 结束时间时间戳（单位：毫秒）
        EndTime int64 `json:"endTime"`
        // 实际开始时间时间戳（单位：毫秒）
        ActualStartTime int64 `json:"actualStartTime"`
        // 实际结束时间时间戳（单位：毫秒）
        ActualEndTime int64 `json:"actualEndTime"`
        // 授课人信息
        Teacher *User `json:"teacher"`
        // 当前用户信息
        User *User `json:"user"`
        // 回放信息
        Playback *Playback `json:"playback"`
        // 学科
        Subject string `json:"subject"`
        // 机构id
        InstitutionId string `json:"institutionId"`
    }

    ScheduleDetailReply {
        // 日期，format：yyyy-MM-dd
        Date string `json:"date"`
        // 直播课程列表
        List []*UserLiveEvent `json:"list"`
    }

    TalLive {
        // 直播标题（通知标题）
        Title string `json:"title"`
        // 直播描述
        Content string `json:"content,omitempty,optional"`
        // 图片，可选，同通知（扩展考虑，当前版本不传）
        Images []*ImageRequest `json:"images,omitempty,optional"`
        // 音频，可选，同通知（扩展考虑，当前版本不传）
        Audio *AudioRequest `json:"audio,omitempty,optional"`
        // 视频，可选，同通知（扩展考虑，当前版本不传）
        Video *VideoRequest `json:"video,omitempty,optional"`
        // 附件，可选，同通知（扩展考虑，当前版本不传）
        Attachments []*AttachmentRequest `json:"attachements,omitempty,optional"`
        // 额外参数，可选，同通知（扩展考虑，当前版本不传）
        Extras map[string]interface{} `json:"extras,omitempty,optional"`
        // 直播参与人员（通知接收人员），同通知
        Receivers []*Receiver `json:"receivers"`
        From string `json:"from"`
        // 开始时间时间戳，单位：毫秒
        StartTime int64 `json:"startTime"`
        // 结束时间时间戳，单位：毫秒
        EndTime int64 `json:"endTime"`
        // 学科
        Subject string `json:"subject"`
        // 提示时间，开始前多少分钟，item不能小于0，如果不提醒，则不传
        RemindPeriod []int64 `json:"remindPeriod,optional"`
        // 回放过期时间设置,0则代表不开启回放，1-365则代表开启回放并设置有效期
        PlaybackExpire int `json:"playbackExpire"`
    }

    CreateLiveReq {
        Live *TalLive `json:"live"`
    }

    LiveExtra {
        // 直播id
        LiveId string `json:"liveId"`
        // 课程id
        LessonId int64 `json:"lessonId"`
        // 时间戳，单位：毫秒
        Timestamp int64 `json:"timestamp"`
    }

    IntersectionCheckReq {
        // 开始时间时间戳，单位：毫秒
        StartTime int64 `json:"startTime"`
        // 结束时间时间戳，单位：毫秒
        EndTime int64 `json:"endTime"`
        ClassroomIds []string `json:"classroomIds"`
    }

    IntersectedClassroom {
        Id string `json:"id"`
        Name string `json:"name"`
    }

    IntersectionCheckReply {
        // 存在时间冲突的班级
        IntersectedClassrooms []*IntersectedClassroom `json:"intersectedClassrooms"`
    }

    DeleteLiveReq {
        // 直播id
        LessonId int64 `path:"lessonId"`
    }

    LiveReq {
        LiveId string `path:"liveId"`
    }

    ClassEventReq {
        LessonId int64 `json:"lessonId"`
        // 事件类型 START-开始上课，FINISH-结束上课
        EventType string `json:"eventType"`
    }

    LiveCreateEnableReply {
        Enable bool `json:"enable"`
    }

    LiveEnableReply {
        Enable bool `json:"enable"`
    }
)

type (
    CheckTokenReq {
        Token string `form:"token"`
        LessonId int64 `form:"lesson_id"`
    }

    CheckTokenReply {
        Status string `json:"status"`
        Time string `json:"time"`
        Data string `json:"data"`
        Msg string `json:"msg"`
    }
)

@server(
    jwt: Auth
)
service tallive-api {
    // 创建直播
    @handler createLive
    post /tallive/live/create (CreateLiveReq)

    // 获取指定时间范围日程标记列表
    @handler getScheduleList
    post /tallive/live/schedule/list (ScheduleReq) returns (ScheduleReply)

    // 获取指定日期的日程信息
    @handler getScheduleDetail
    post /tallive/live/schedule/detail (ScheduleDetailReq) returns (ScheduleDetailReply)

    // 检测班级是否存在上课冲突
    @handler intersectionCheck
    post /tallive/live/intersection/check (IntersectionCheckReq) returns (IntersectionCheckReply)

    // 查看直播详情
    @handler getLiveDetail
    get /tallive/live/detail/:liveId (LiveReq) returns (LiveDetail)

    // 删除直播
    @handler deleteLive
    post /tallive/live/delete/:lessonId (DeleteLiveReq)

    // 获取教师是否有创建直播权限
    @handler liveCreateEnable
    get /tallive/live/create/enable returns (LiveCreateEnableReply)

    // 获取用户是否用直播云权限
    @handler LiveEnable
    get /tallive/live/enable returns (LiveEnableReply)
}

service tallive-api {
    // 直播云验签回调协议
    @handler checkToken
    post /tallive/check/token (CheckTokenReq) returns (CheckTokenReply)

    @handler liveEvent
    post /tallive/live/event (ClassEventReq)
}