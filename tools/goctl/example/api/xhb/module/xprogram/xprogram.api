info(
	title: "xprogram"
	desc: "xprogram"
	author: "yangtao"
	email: "yangtao9@tal.com"
)

type (
	GetProgramInfoRequest {
		AppId  string `json:"id"`
		Env    string `json:"env,default=online"`
		Params string `json:"params"`
		Token  string `path:"token"`
	}

	EmptyResponse struct{}

	GetXProgramResponse {
		Id                 string `json:"id"`
		AppId              string `json:"appId"`
		CreateTime         int64  `json:"createTime"`
		Name               string `json:"name"`
		Logo               string `json:"logo"`
		Version            string `json:"version"`
		ShortVersion       string `json:"shortVersion"`
		Url                string `json:"url"`
		AppMiniVersion     string `json:"appMiniVersion"`
		Params             string `json:"params,omitempty"`
		VersionUpdateTime  int64  `json:"versionUpdateTime"`
		Cached             bool   `json:"cached,omitempty"`
		CacheInterval      int    `json:"cacheInterval,omitempty"`
		EnableAddToDesktop bool   `json:"enableAddToDesktop,optional"`
		ForceUpdate        bool   `json:"forceUpdate,omitempty"` // 强制更新
	}

	GetAppStoreProgramInfoRequest {
		AppId string `path:"appId"`
	}

	XProgramList {
		List []*XProgram `json:"list"`
	}

	XProgram {
		Id                 string   `json:"id,omitempty"`
		AppId              string   `json:"appId,omitempty"`
		VersionUpdateTime  int64    `json:"versionUpdateTime,omitempty"`
		Url                string   `json:"url,omitempty"`
		Name               string   `json:"name,omitempty"`
		Logo               string   `json:"logo,omitempty"`
		Version            string   `json:"version,omitempty"`
		ShortVersion       string   `json:"shortVersion"`
		AppMinVersion      string   `json:"appMiniVersion,omitempty"`
		Params             string   `json:"params,omitempty"`
		Creator            string   `json:"creator,omitempty"`
		Audits             []string `json:"audits,omitempty"`
		Desc               string   `json:"desc,omitempty"`
		Snapshots          []string `json:"snapshots,omitempty"`
		InAppStore         bool     `json:"inAppStore,omitempty"`
		Cached             bool     `json:"cached,omitempty"`
		CacheInterval      int      `json:"cacheInterval,omitempty"`
		EnableAddToDesktop bool     `json:"enableAddToDesktop,optional"`
	}

	AddXProgramRequest {
		Token              string   `path:"token"`
		AppId              string   `json:"appId"`
		Name               string   `json:"name"`
		Logo               string   `json:"logo"`
		AppMiniVersion     string   `json:"appMiniVersion"`
		Audits             []string `json:"audits,optional"`
		Desc               string   `json:"desc,optional"`
		Snapshots          []string `json:"snapshots,optional"`
		InAppStore         bool     `json:"inAppStore,optional"`
		Cached             bool     `json:"cached,optional"`
		CacheInterval      int      `json:"cacheInterval,optional"`
		EnableAddToDesktop bool     `json:"enableAddToDesktop,optional"`
	}

	DeleteXProgramRequest {
		Token string `path:"token"`
		Id    string `path:"id"`
	}

	ListXProgramsRequest {
		Token string `path:"token"`
	}

	UpdateXProgramRequest {
		Token              string   `path:"token"`
		Id                 string   `json:"id"`
		Name               string   `json:"name"`
		Logo               string   `json:"logo"`
		AppMiniVersion     string   `json:"appMiniVersion"`
		Audits             []string `json:"audits,optional"`
		Desc               string   `json:"desc,optional"`
		Snapshots          []string `json:"snapshots,optional"`
		InAppStore         bool     `json:"inAppStore,optional"`
		Cached             bool     `json:"cached,optional"`
		CacheInterval      int      `json:"cacheInterval,optional"`
		EnableAddToDesktop bool     `json:"enableAddToDesktop,optional"`
	}

	UpdateParamsRequest {
		VersionId string `path:"versionId"`
		Params    string `json:"params"`
		Token     string `path:"token"`
	}

	AddXProgramVersionRequest {
		AppId  string `json:"appId"`
		Url    string `json:"url"`
		Token  string `path:"token"`
		Params string `json:"params"`
		Size   int64  `json:"size"`
	}

	GetDetailVersionRequest {
		AppId string `path:"appId"`
		Token string `path:"token"`
	}

	XProgramVersion {
		Id           string   `bson:"_id" json:"id,omitempty"`
		CreateTime   string   `bson:"createTime" json:"createTime,omitempty"`
		AppId        string   `bson:"appId" json:"appId,omitempty"`               // 应用Id
		Url          string   `bson:"url" json:"url,omitempty"`                   // 包地址
		UserId       string   `bson:"userId" json:"userId,omitempty"`             // 创建Build的用户
		Status       string   `bson:"status" json:"status,omitempty"`             // 环境
		Version      string   `bson:"version" json:"version,omitempty"`           // Build号
		ShortVersion string   `bson:"shortVersion" json:"shortVersion,omitempty"` // 版本号
		Params       string   `bson:"params" json:"params,omitempty"`             // 启动参数
		Audits       []string `bson:"audits" json:"audits,omitempty"`             // 审核人
		Change       string   `bson:"change" json:"change,omitempty"`             // 变更信息
		Size         int64    `bson:"size" json:"size,omitempty"`                 // 包大小
		ForceUpdate  bool     `bson:"forceUpdate" json:"forceUpdate,omitempty"`   // 强制更新
		GrayScale    int      `bson:"grayScale" json:"grayScale,omitempty"`       // 灰度发布比率
	}

	XProgramVersionList {
		List []*XProgramVersion `json:"list"`
	}

	ListInReviewRequest {
		Mobile string `path:"mobile"`
		Token  string `path:"token"`
	}

	UpgradeVersionRequest {
		VersionId    string `path:"versionId"`
		Change       string `json:"change,optional"`
		ForceUpdate  bool   `json:"forceUpdate,optional"`
		ShortVersion string `json:"shortVersion,optional"`
		GrayScale    int    `json:"grayScale,optional"`
	}

	DeleteVersionRequest {
		Token string `path:"token"`
		Id    string `path:"id"`
	}

	AuditInReviewRequest {
		VersionId string `json:"versionId"`
		IsPass    bool   `json:"isPass"`
		Mobile    string `json:"mobile"`
		Token     string `path:"token"`
	}

	ListOnlineVersionsRequest {
		AppId string `path:"appId"`
		Token string `path:"token"`
	}

	AddAuditRequest {
		Token      string `path:"token"`
		Mobile     string `json:"mobile"`
		Department string `json:"department"`
		Role       string `json:"role"`
		Name       string `json:"name"`
	}

	DeleteAuditRequest {
		Token  string `path:"token"`
		Mobile string `json:"mobile,omitempty"`
	}

	ListAllAuditInfoRequest {
		Token string `path:"token"`
	}

	XProgramAudit {
		Id         string `bson:"_id" json:"id,omitempty"`
		CreateTime string `bson:"createTime" json:"createTime,omitempty"`
		UserId     string `bson:"userId" json:"userId,omitempty"`
		Mobile     string `bson:"mobile" json:"mobile,omitempty"`
		Name       string `bson:"name" json:"name,omitempty"`
		Department string `bson:"department" json:"department,omitempty"`
		Role       string `bson:"role" json:"role,omitempty"`
		Avatar     string `bson:"avatar" json:"avatar,omitempty"`
	}

	XProgramAuditList {
		List []*XProgramVersion `json:"list"`
	}

	GetAuditInfoRequest {
		Token string `path:"token"`
	}
)

service xprogram-api {
	@doc(
		summary: "programInfo"
	)
	@server(
		handler: GetProgramInfoHandler
	)
	post /xprogram/info/:token (GetProgramInfoRequest) returns (GetXProgramResponse)
	
	@doc(
		summary: "appStoreProgramInfo"
	)
	@server(
		handler: GetAppStoreProgramInfoHandler
	)
	get /xprogram/appstore/app/info/:appId (GetAppStoreProgramInfoRequest) returns (XProgram)
	
	@doc(
		summary: "addProgram"
	)
	@server(
		handler: AddXProgramHandler
	)
	post /xprogram/add/:token (AddXProgramRequest) returns (XProgram)
	
	@doc(
		summary: "deleteProgram"
	)
	@server(
		handler: DeleteXProgramHandler
	)
	delete /xprogram/delete/:token/:id (GetProgramInfoRequest) returns (EmptyResponse)
	
	@doc(
		summary: "programList"
	)
	@server(
		handler: ListXProgramsHandler
	)
	get /xprogram/list/:token (ListXProgramsRequest) returns (XProgramList)
	
	@doc(
		summary: "appStoreProgramList"
	)
	@server(
		handler: ListAppStoreXProgramsHandler
	)
	get /xprogram/appstore/list () returns (XProgramList)
	
	@doc(
		summary: "updateProgram"
	)
	@server(
		handler: UpdateXProgramsHandler
	)
	post /xprogram/update/:token (UpdateXProgramRequest) returns (EmptyResponse)
	
	@doc(
		summary: "更新晓程序版本"
	)
	@server(
		handler: UpdateParamsHandler
	)
	post /xprogram/update/params/:token/:versionId (UpdateParamsRequest) returns (EmptyResponse)
	
	@doc(
		summary: "新增晓程序版本"
	)
	@server(
		handler: AddXProgramVersionHandler
	)
	post /xprogram/version/add/:token (AddXProgramVersionRequest) returns (EmptyResponse)
	
	@doc(
		summary: "晓程序版本列表"
	)
	@server(
		handler: GetVersionDetailHandler
	)
	get /xprogram/detail/:token/:appId (GetDetailVersionRequest) returns (XProgramVersionList)
	
	@doc(
		summary: "晓程序版本详情"
	)
	@server(
		handler: FetchInReviewHandler
	)
	get /xprogram/version/inreview/:token/:mobile (ListInReviewRequest) returns (XProgramList)
	
	@doc(
		summary: "UpgradeVersion"
	)
	@server(
		handler: UpgradeVersionHandler
	)
	post /xprogram/upgrade/version/:versionId (UpgradeVersionRequest) returns (EmptyResponse)
	
	@doc(
		summary: "删除晓程序版本"
	)
	@server(
		handler: DeleteVersionDetailHandler
	)
	post /xprogram/version/delete/:token/:id (DeleteVersionRequest) returns (EmptyResponse)
	
	@doc(
		summary: "AuditInReviewVersion"
	)
	@server(
		handler: AuditInReviewVersionHandler
	)
	get /xprogram/version/audit/:token (AuditInReviewRequest) returns (EmptyResponse)
	
	@doc(
		summary: "versionList"
	)
	@server(
		handler: ListOnlineVersionHandler
	)
	get /xprogram/version/online/list/:token/:appId (ListOnlineVersionsRequest) returns (XProgramVersionList)
	
	@doc(
		summary: "addAduit"
	)
	@server(
		handler: AddAuditHandler
	)
	post /xprogram/audit/add/:token (AddAuditRequest) returns (EmptyResponse)
	
	@doc(
		summary: "deleteAduit"
	)
	@server(
		handler: DeleteAudioHandler
	)
	post /xprogram/audit/delete/:token (DeleteAuditRequest) returns (EmptyResponse)
	
	@doc(
		summary: "aduitList"
	)
	@server(
		handler: ListAllAuditHandler
	)
	get /xprogram/audit/list/:token (ListAllAuditInfoRequest) returns (XProgramAuditList)
	
	@doc(
		summary: "aduitInfo"
	)
	@server(
		handler: GetAuditInfoHandler
	)
	get /xprogram/audit/info/:token (GetAuditInfoRequest) returns (XProgramAudit)
}