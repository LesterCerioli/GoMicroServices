type ImageRequest {
	Original  string `json:"original,optional"`  // 原始图id
	Preview   string `json:"preview,optional"`   // 预览图
	Thumbnail string `json:"thumbnail,optional"` // 缩略图id
	Size      int    `json:"size,optional"`      // 原图大小
	Height    int    `json:"height,optional"`    // 高
	Width     int    `json:"width,optional"`     // 宽
}

type AudioRequest {
	Id            string `json:"id"`                     // 语音文件id
	Duration      int    `json:"duration,optional"`      // 持续时间
	FileExtension string `json:"fileExtension,optional"` // 文件后缀名
	Size          int    `json:"size,optional"`          // 文件大小
	Name          string `json:"name,optional"`          // 显示名称
}

type AttachmentRequest {
	Id       string        `json:"id,optional"`       // 网络文件id
	Name     string        `json:"name,optional"`     // 显示名称
	MimeType string        `json:"mimeType,optional"` // 附件mimeType
	Attrs    *AttrsRequest `json:"attrs,optional"`    // 其他属性
}

type AttrsRequest {
	Size string `json:"size,optional"`
}

type VideoRequest {
	Title        string `json:"title,optional"`        // 视频标题
	Desc         string `json:"desc,optional"`         // 视频描述
	CoverUrl     string `json:"coverUrl,optional"`     // 视频封面url
	PlayUrl      string `json:"playUrl"`               // 视频url
	PlayTime     int    `json:"playTime,optional"`     // 视频的播放时长
	MagicContext string `json:"magicContext,optional"` // 视频回调标识字段[回调透传字段]
	Type         string `json:"type,optional"`         // 视频类型
	Height       int    `json:"height,optional"`       // 视频高
	Width        int    `json:"width,optional"`        // 视频宽
}

type Receiver {
	ClassroomId string   `json:"classroomId,optional"`
	Type        string   `json:"type"` // 消息类型  整班 老师 学生 定向选择
	ReceiverIds []string `json:"receiverIds,optional"`
	Additions   []string `json:"additions,optional"`
}

type Live {
	Images             []*ImageRequest        `json:"images,omitempty,optional"`
	Audio              *AudioRequest          `json:"audio,omitempty,optional"`
	Video              *VideoRequest          `json:"video,omitempty,optional"`
	Attachments        []*AttachmentRequest   `json:"attachements,omitempty,optional"`
	Extras             map[string]interface{} `json:"extras,omitempty,optional"`
	Receivers          []*Receiver            `json:"receivers"` // CLASSROOM 全部   NORMAL=ReceiverIds=null  Additions=teacherId OPTIONAL=指定ReceiverIds=成员  Additions=【】
	FileUpload         bool                   `json:"fileUpload,optional"`
	Title              string                 `json:"title"`                                 //标题
	Content            string                 `json:"content,optional,omitempty"`            // 资料及备注
	Subject            string                 `json:"subject,omitempty"`                     // 授课（学科）
	StartTime          int64                  `json:"startTime,omitempty"`                   //课程开始时间
	EndTime            int64                  `json:"endTime,omitempty"`                     // 课程结束时间
	Status             int                    `json:"status,omitempty"`                      // 0=未开始 1=进行中 2=已结束
	InvisibleForSender bool                   `json:"invisibleForSender,omitempty,optional"` // 是否对发送者不可见: true 发送者不可见； false 发送者可见
}

type PublishLiveRequest {
	Live *Live `json:"live"`
}

type SimpleSenderView {
	Id          string `json:"id"`
	DisplayName string `json:"displayName,omitempty"` // 显示名
	Avatar      string `json:"avatar,omitempty"`      // 头像图片id
}

type ClassroomView {
	Id        string `json:"id,omitempty"`
	Name      string `json:"name,omitempty"`
	BadgeId   string `json:"badgeId,omitempty"`
	BadgeType string `json:"badgeType,omitempty"`
	BgImage   string `json:"bgImage,omitempty"`
}

type Image {
	Original  string `json:"original,omitempty"`
	Preview   string `json:"preview,omitempty"`
	Thumbnail string `json:"thumbnail,omitempty"`
	Size      int    `json:"size,omitempty"`
	Height    int    `json:"height,omitempty"`
	Width     int    `json:"width,omitempty"`
}

type Audio {
	Id            string `json:"id,omitempty"`
	Duration      int    `json:"duration,omitempty"`
	FileExtension string `json:"fileExtension,omitempty"`
	Size          int    `json:"size,omitempty"`
	Name          string `json:"name,omitempty"`
}

type Link {
	Url        string `json:"url,omitempty"`
	Image      string `json:"image,omitempty"`
	Title      string `json:"title,omitempty"`
	Periodical string `json:"periodical,omitempty"`
	Type       string `json:"type,omitempty"`
}

type Attachment {
	Id       string `json:"id"`
	Name     string `json:"name,omitempty"`
	MimeType string `json:"mimeType,omitempty"`
	Attrs    *Attrs `json:"attrs,omitempty"`
	Size     string `json:"size,omitempty"` // 5.0.0 add
}

type Attrs {
	Size string `json:"size,omitempty"`
}

type Video {
	PlayUrl      string `json:"playUrl,omitempty"`
	Title        string `json:"title,omitempty"`
	Desc         string `json:"desc,omitempty"`
	CoverUrl     string `json:"coverUrl,omitempty"`
	PlayTime     int    `json:"playTime,omitempty"`
	MagicContext string `json:"magicContext,omitempty"`
	Type         string `json:"type,omitempty"`
	Height       int    `json:"height,omitempty"`
	Width        int    `json:"width,omitempty"`
}

type WhiteBoard {
	Token string `json:"token,omitempty"`
	UUID  string `json:"uuid,omitempty"`
}

type LiveView {
	ContentableView
	ClassroomList []string   `json:"classroomList"`
	HasVideo      bool       `json:"hasVideo"`
	HasStat       bool       `json:"hasStat"`
	Subject       string     `json:"subject"`
	StartTime     int64      `json:"startTime"`
	EndTime       int64      `json:"endTime"`
	Status        int        `json:"status"` // 0:未开始 1:进行中 2:已结束
	WhiteBoard    WhiteBoard `json:"whiteBoard"`
}

type Receipt {
	Total         int               `json:"total"`                // 消息接收总数量
	Receipted     int               `json:"receipted"`            // 已成功接收数量
	Feedbacked    int               `json:"feedbacked,omitempty"` // 已成功反馈数量
	Attitude      string            `json:"attitude,omitempty"`   // 我发送的反馈
	Received      bool              `json:"received,omitempty"`   // 我是否已经已收到此消息
	IsObserver    bool              `json:"isObserver,omitempty"`
	PunchCardItem *PunchCardReceipt `json:"punchCardItem,omitempty"` //打卡反馈情况
	SurveyItem    *SurveyReceipt    `json:"surveyItem,omitempty"`
}

type PunchCardReceipt {
	TotalFamilyCount   int64    `json:"totalFamilyCount"`             //需打卡总家庭数 （分母）
	PunchedFamilyCount int64    `json:"punchedFamilyCount"`           // 打卡总家庭数 （分子）
	TotalDays          int64    `json:"totalDays"`                    // 总周期天数
	PassDays           int64    `json:"passDays"`                     // 已进行天数
	TodayJoinUsers     []string `json:"todayJoinUsers,omitempty"`     //今天打卡的人，最新的5个人  5.0.0 add
	TodayJoinCount     int      `json:"todayJoinCount,omitempty"`     //今日参加打卡的总人数  5.0.0 add
	TotalNeedJoinCount int      `json:"totalNeedJoinCount,omitempty"` //今日打卡总人数  5.0.0 add
	Status             string   `json:"status,omitempty"`             //打卡状态 "NoNeedPunchCard" 无需打卡, "PunchCarded" 已打卡,"UnPunchCard" 未打卡  5.0.0 add
	TotalNatureDay     int64    `json:"totalNatureDay,omitempty"`     //打卡自然日总天数
	PassNatureDay      int64    `json:"passNatureDay"`                //打卡已过去的日然日
	FirstTaskPunchTime int64    `json:"firstTaskPunchTime,omitempty"` //第一个task的打卡时间
}

type SurveyReceipt {
	JoinUsers  []string `json:"joinUsers"`
	JoinNumber int      `json:"joinNumber"`
}

type PublishLiveMessageView {
	Id            string            `json:"id,omitempty"`
	SenderId      string            `json:"senderId,omitempty"`
	Sender        *SimpleSenderView `json:"sender,omitempty"`
	CreateTime    int64             `json:"createTime,omitempty"`
	UpdateTime    int64             `json:"updateTime,omitempty"`
	Category      string            `json:"category"`
	ClassroomId   string            `json:"classroomId,omitempty"`
	ClassroomView *ClassroomView    `json:"classroom,omitempty"` // 目标班级
	LiveView      *LiveView         `json:"live,omitempty"`
	Receipt       *Receipt          `json:"receipt,omitempty"`
}

type PublishLiveResponse {
	Messages []*PublishLiveMessageView `json:"messages,omitempty"`
}

type AuthRequest {
}

type AuthResponse {
	Auth          bool `json:"auth"`
	LiveCloudAuth bool `json:"liveCloudAuth"`
	LiveTab       bool `json:"liveTab"`
}

type BackVideoElemView {
	Url        string `json:"url"`
	Title      string `json:"title"`
	Duration   int64  `json:"duration"`   //录制时长（毫秒）
	RecordTime int64  `json:"recordTime"` //该段录制开始的时间
	Sid        string `json:"sid"`        //这个是声网返回的sid，用于标记一次录制
}

type GetLiveRequest {
	LiveId string `path:"liveId"`
}

type GetHouseStatusRequest {
	LiveHouseName string `path:"liveHouseName"`
}

type GetHouseStatusResponse {
	HasStat      bool `json:"hasStat"`
	HasBackVideo bool `json:"hasBackVideo"`
}

type GetLiveResponse {
	ContentableView
	Id               string               `json:"id,omitempty"`
	SenderId         string               `json:"senderId,omitempty"`
	Uid              int                  `json:"uid,omitempty"`
	ClassroomId      string               `json:"classroomId,omitempty"`
	ClassroomList    []string             `json:"classroomList"`
	Type             string               `json:"type,omitempty"` // 取CLASSROOM NORMAL OPTIONAL
	Receivers        []string             `json:"receivers,omitempty"`
	Additions        []string             `json:"additions,omitempty"`   // 附加的用户 type不是OPTIONAL和CLASSROOM时有效
	Subject          string               `json:"subject,omitempty"`     // 授课（学科）
	TeacherId        string               `json:"teacherId,omitempty"`   // 讲师
	TeacherName      string               `json:"teacherName,omitempty"` // 讲师名字
	Status           int                  `json:"status"`                // 0=未开始 1=进行中 2=已结束
	RunningStatus    string               `json:"runningStatus"`         //（当status=1） running=进行中 pause=暂停
	CloseDiscussion  bool                 `json:"closeDiscussion"`       // 是否关闭讨论
	AudienceExceeded bool                 `json:"audienceExceeded"`      // 是否人数过多
	StartTime        int64                `json:"startTime,omitempty"`   // 课程开始时间
	EndTime          int64                `json:"endTime,omitempty"`     // 课程结束时间
	CreateTime       int64                `json:"createTime,omitempty"`
	UpdateTime       int64                `json:"updateTime,omitempty"`
	LiveHouseName    string               `json:"liveHouseName"` //房间号
	WhiteBoard       WhiteBoard           `json:"whiteBoard"`
	BackVideo        []*BackVideoElemView `json:"backVideo"`        //视频回放
	HasStat          bool                 `json:"hasStat"`          // 是否有考勤统计
	CameraOnList     []int                `json:"cameraOnList"`     // 摄像头打开的uid列表
	MicrophoneOnList []int                `json:"microphoneOnList"` // 麦克风打开的uid列表

	CurrentRecordSid        string `json:"currentRecordSid"`        // 当前录制中的sid,为空则说明没有进行中的录制
	CurrentRecordResourceId string `json:"currentRecordResourceId"` // 当前录制中的resourceId，为空则说明没有进行中的录制
	StartLiveTime           int64  `json:"startLiveTime"`           // 实际开始上课时间，为0说明老师没有点击上课按钮
	EndLiveTime             int64  `json:"endLiveTime"`             // 实际下课时间.为0说明还没有下课
}

type GetAudiencesRequest {
	LiveId string `path:"liveId"`
}

type GetAudiencesResponse {
	Anchor       *Audience   `json:"anchor"`
	List         []*Audience `json:"list"`
	GenTimestamp int64       `json:"genTimestamp"` // 缓存的生成时间。用于判断缓存是否失效（新用户入班）
}

type Audience {
	Uid              int    `json:"uid"`   // 声网uid
	Token            string `json:"token"` // 用户token
	Name             string `json:"name"`  // 用户姓名
	Avatar           string `json:"avatar,omitempty"`
	Status           string `json:"status,omitempty"`           // 在线状态 online=在线，offline=离线
	Broadcast        bool   `json:"broadcast"`                  // 是否发言
	MicrophoneStatus string `json:"microphoneStatus,omitempty"` // open=打开  close=关闭 TODO
	HandsUp          bool   `json:"handsUp"`                    // 是否举手
	ForbiddenWord    bool   `json:"forbiddenWord"`              // 是否禁言
}

type UpdateLiveRequest {
	Status        int    `json:"status"`
	LiveHouseName string `path:"liveHouseName"`
	RunningStatus string `json:"runningStatus,optional"` //当status=1的时候，需要这个参数running=进行中，pause=暂停
}
type UpdateLiveResponse {
}

type StartRecordRequest {
	LiveHouseName string `path:"liveHouseName"`
	Width         int64  `json:"width,optional"`
	Height        int64  `json:"height,optional"`
}

type StartRecordResponse {
	ResourceId   string `json:"resourceId"`
	Sid          string `json:"sid"`
	CurrentCount int    `json:"currentCount"`
}

type StopRecordRequest {
	LiveHouseName string `path:"liveHouseName"`
	ResourceId    string `json:"resourceId"`
	Sid           string `json:"sid"`
	Title         string `json:"title"`
	Quit          bool   `json:"quit"` // 是否放弃录制
}
type StopRecordResponse {
}

type GetSingleAudienceRequest {
}

type GetForbiddenWordsRequest {
	LiveHoseName string `path:"liveHouseName"`
}

type GetForbiddenWordsResponse {
	ForbiddenWord bool `json:"forbiddenWord"`
}

type SetForbiddenWordsRequest {
	LiveHouseName string              `path:"liveHouseName"`
	Users         []ForbiddenWordInfo `json:"users,optional"`
	All           string              `json:"all,optional"`
}

type ForbiddenWordInfo {
	UserId        string `json:"userId"`
	ForbiddenWord bool   `json:"forbiddenWord"`
}

type SetForbiddenWordsResponse {
}

type HandsUpRequest {
	LiveHouseName string `path:"liveHouseName"`
}
type HandsUpResonse {
}

type RevokeHandsUpRequest {
	LiveHouseName string `path:"liveHouseName"`
}
type RevokeHandsUpResonse {
}

type PutDownHandsRequest {
	LiveHouseName string `path:"liveHouseName"`
}
type PutDownHandsResponse {
}

type PutDownSingleHandRequest {
	LiveHouseName string `path:"liveHouseName"`
	SingleToken   string `json:"singleToken"`
}
type PutDownSingleHandResponse {
}

type GetAgoraTokenRequest {
	LiveHouseName string `path:"liveHouseName"`
	Type          string `form:"type,optional"` // 不填的话，默认是rtc的token。
	Uid           string `form:"uid,optional"`
}

type GetAgoraTokenResponse {
	Token string `json:"token"`
}

type GetDiscussionStatusRequest {
	LiveId string `path:"liveId"`
}

type GetDiscussionStatusResponse {
	CloseDiscussion bool `json:"closeDiscussion"` // 是否关闭讨论
}

type UpdateDiscussionStatusRequest {
	LiveHouseName   string `path:"liveHouseName"`
	CloseDiscussion bool   `json:"closeDiscussion"`
}

type UpdateDiscussionStatusResponse {
}

type LiveStatisticRequest {
	Token         string `path:"token"`
	LiveHouseName string `path:"liveHouseName"`
}

type LiveStatisticResponse {
	List []*LiveStatisticItem `json:"list"`
}

type LiveStatisticItem {
	ActualStartTime int64             `json:"actualStartTime,omitempty"`
	ActualEndTime   int64             `json:"actualEndTime,omitempty"`
	ClassroomId     string            `json:"classroomId"`
	ClassroomName   string            `json:"classroomName"`
	Pinyin          string            `json:"pinyin"`
	Selected        bool              `json:"selected"`
	IsOlder         bool              `json:"isOlder"`
	Attendance      []*LiveAttendance `json:"attendance"`
	Absence         []*LiveAttendance `json:"absence"`
}

type LiveAttendance {
	UserToken       string `json:"userToken"`
	Name            string `json:"name"`
	Pinyin          string `json:"pinyin"`
	Avatar          string `json:"avatar"`
	ClassroomName   string `json:"classroomName"`
	ClassroomPinyin string `json:"classroomPinyin"`
	ListenTime      int64  `json:"listenTime"`
	LeaveTime       int64  `json:"leaveTime"`
	LateTime        int64  `json:"lateTime"`
}

type LiveClassroomStatisticRequest {
	Token  string `path:"token"`
	LiveId string `path:"liveId"`
}

type GetUserTimetableRequest {
	Date           string `json:"date"`
	Subject        string `json:"subject,optional"`
	Limit          int    `json:"limit,optional"`
	LastStartTime  int64  `json:"lastStartTime,optional"`
	LastEndTime    int64  `json:"lastEndTime,optional"`
	LastCreateTime int64  `json:"lastCreateTime,optional"`
}

type GetUserTimetableResponse {
	Lessons        []*LessonView `json:"lessons"`
	HasMore        bool          `json:"hasMore"`
	LastStartTime  int64         `json:"lastStartTime"`
	LastEndTime    int64         `json:"lastEndTime"`
	LastCreateTime int64         `json:"lastCreateTime"`
}

type LessonView {
	StartTime     int64            `json:"startTime,omitempty"`     // 直播开始时间
	EndTime       int64            `json:"endTime,omitempty"`       // 直播结束时间
	CreateTime    int64            `json:"createTime,omitempty"`    // 创建直播的时间
	Subject       string           `json:"subject,omitempty"`       // 科目
	LiveHouseName string           `json:"liveHouseName,omitempty"` // 房号
	Title         string           `json:"title,omitempty"`
	Status        int              `json:"status"`
	SenderId      string           `json:"senderId"`
	HasVideo      bool             `json:"hasVideo"`
	HasStat       bool             `json:"hasStat"`
	ClassroomList []*ClassroomElem `json:"classroomList,omitempty"` // 相关的班级
	SenderName    string           `json:"senderName,omitempty"`    // 创建直播的老师
}

type ClassroomElem {
	LiveId        string `json:"liveId,omitempty"`
	ClassroomId   string `json:"classroomId,omitempty"`
	ClassroomName string `json:"classroomName,omitempty"`
}

type Notice {
	Title       string                 `json:"title,omitempty,optional"`
	Content     string                 `json:"content,omitempty,optional"`
	Images      []*ImageRequest        `json:"images,omitempty,optional"`
	Audio       *AudioRequest          `json:"audio,omitempty,optional"`
	Video       *VideoRequest          `json:"video,omitempty,optional"`
	Attachments []AttachmentRequest    `json:"attachements,omitempty,optional"`
	Extras      map[string]interface{} `json:"extras,omitempty,optional"`
	Receivers   []Receiver             `json:"receivers"`
	FileUpload  bool                   `json:"fileUpload,optional"`
	TemplateId  string                 `json:"templateId,optional"`
	// 来自哪里
	From string `json:"from,optional"`
	// 是否对发送者不可见: true 发送者不可见； false 发送者可见
	InvisibleForSender bool `json:"invisibleForSender,omitempty,optional"`
}

type LiveCloudCreateRequest {
	Token     string `json:"token"`
	Subject   string `json:"subject"`
	StartTime int64  `json:"startTime"`
	EndTime   int64  `json:"endTime"`
	Notice
}

type LiveCloudMessageViewResponse {
	Messages []*LiveCloudMessageView `json:"messages"`
}

type ContentableView {
	// 标题
	Title string `json:"title,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 图片id列表, 需要先上传
	Images []*Image `json:"images,omitempty"`
	// 语音上传后的对象
	Audio *Audio `json:"audio,omitempty"`
	// 上传后的视频
	Video *Video `json:"video,omitempty"`
	// 其他附件
	Attachments []*Attachment `json:"attachements,omitempty"`

	Extras map[string]interface{} `json:"extras,omitempty"`
	// 来自哪里
	From string `json:"from,omitempty"`
}

type NoticeView {
	ContentableView
}

type PublishNoticeMessageView {
	ContentableView
	Id          string      `json:"id,omitempty"`
	SenderId    string      `json:"senderId,omitempty"`
	CreateTime  int64       `json:"createTime,omitempty"`
	Timestamp   int64       `json:"timestamp,omitempty"`
	Category    string      `json:"category"`
	ClassroomId string      `json:"classroomId,omitempty"`
	NoticeView  *NoticeView `json:"notice,omitempty"` //5.0 add
	Receipt     *Receipt    `json:"receipt,omitempty"`
}

type LiveCloudMessageView {
	PublishNoticeMessageView
	Sender        *SimpleSenderView `json:"sender,omitempty"`
	ClassroomView *ClassroomView    `json:"classroom,omitempty"`
}

type ReportStatusRequest {
	LiveHouseName    string `path:"liveHouseName"`
	CameraStatus     string `json:"cameraStatus"`     // on off
	MicrophoneStatus string `json:"microphoneStatus"` // on off
}

type ReportStatusResponse {
}

type GetHandsUpAndWhiteListRequest {
	LiveHouseName string `path:"liveHouseName"`
}

type GetHandsUpAndWhiteListResponse {
	HandsUpList        []int `json:"handsUpList"`
	ForbiddenWhiteList []int `json:"forbiddenWhiteList"`
}

service live-api {
	@doc(
		summary: 获取频道内白名单用户，在麦，在摄像头，举手的用户
	)
	@server(
		handler: GetHandsUpAndWhiteListHandler
	)
	get /live/handsup-and-whitelist/:liveHouseName(GetHandsUpAndWhiteListRequest) returns(GetHandsUpAndWhiteListResponse)
	
	@doc(
		summary: 客户端上报摄像头和麦克风状态
	)
	@server(
		handler: reportStatusHandler
	)
	post /live/report-status/:liveHouseName(ReportStatusRequest) returns(ReportStatusResponse)
	
	@doc(
		summary: 发布 live
	)
	@server(
		handler: publishLiveHandler
	)
	post /live/publish/pack(PublishLiveRequest) returns(PublishLiveResponse)
	
	@doc(
		summary: 小粉笔权限判断
	)
	@server(
		handler: authHandler
	)
	get /live/auth(AuthRequest) returns(AuthResponse)
	
	@doc(
		summary: 根据id获取 live
	)
	@server(
		handler: getLiveHandler
	)
	post /live/detail/:liveId(GetLiveRequest) returns(GetLiveResponse)
	
	@doc(
		summary: 获取直播间状态
	)
	@server(
		handler: getHouseStatusHandler
	)
	post /live/house/status/:liveHouseName(GetHouseStatusRequest) returns(GetHouseStatusResponse)
	
	@doc(
		summary: 拉取全量直播观众用户
	)
	@server(
		handler: GetAudiencesHandler
	)
	get /live/get-audiences/:liveId(GetAudiencesRequest) returns(GetAudiencesResponse)
	
	@doc(
		summary: 更新直播状态
	)
	@server(
		handler: UpdateLiveStatusHandler
	)
	post /live/update/:liveHouseName(UpdateLiveRequest) returns(UpdateLiveResponse)
	
	@doc(
		summary: 开始录制
	)
	@server(
		handler: StartRecordHandler
	)
	post /live/start-record/:liveHouseName(StartRecordRequest) returns(StartRecordResponse)
	
	@doc(
		summary: 结束录制
	)
	@server(
		handler: StopRecordHandler
	)
	post /live/stop-record/:liveHouseName(StopRecordRequest) returns(StopRecordResponse)
	
	@doc(
		summary: 拉取单个直播观众用户的信息
	)
	@server(
		handler: GetSingleAudienceHandler
	)
	get /live/get-single-audience(GetSingleAudienceRequest) returns(Audience)
	
	@doc(
		summary: 获取禁言权限
	)
	@server(
		handler: GetForbiddenWordsHandler
	)
	get /live/forbidden-words/:liveHouseName(GetForbiddenWordsRequest) returns(GetForbiddenWordsResponse)
	
	@doc(
		summary: 设置禁言权限
	)
	@server(
		handler: SetForbiddenWordsHandler
	)
	post /live/forbidden-words/:liveHouseName(SetForbiddenWordsRequest) returns(SetForbiddenWordsResponse)
	
	@doc(
		summary: 举手
	)
	@server(
		handler: HandsUpHandler
	)
	post /live/hands-up/:liveHouseName(HandsUpRequest) returns(HandsUpResonse)
	
	@doc(
		summary: 取消自己的举手
	)
	@server(
		handler: RevokeHandsUpHandler
	)
	post /live/revoke-hands-up/:liveHouseName(RevokeHandsUpRequest) returns(RevokeHandsUpResonse)
	
	@doc(
		summary: 清除所有的举手
	)
	@server(
		handler: PutDownHandsHandler
	)
	post /live/put-down-hands/:liveHouseName(PutDownHandsRequest) returns(PutDownHandsResponse)
	
	@doc(
		summary: 清除单个人的举手
	)
	@server(
		handler: PutDownSingleHandHandler
	)
	post /live/put-down-single-hand/:liveHouseName(PutDownSingleHandRequest) returns(PutDownSingleHandResponse)
	
	@doc(
		summary: 获取频道token
	)
	@server(
		handler: GetAgoraTokenHandler
	)
	get /live/agora-token/:liveHouseName(GetAgoraTokenRequest) returns(GetAgoraTokenResponse)
	
	@doc(
		summary: 获取讨论状态
	)
	@server(
		handler: GetDiscussionStatusHandler
	)
	get /live/discussion-status/:liveId(GetDiscussionStatusRequest) returns(GetDiscussionStatusResponse)
	
	@doc(
		summary: 更新讨论状态
	)
	@server(
		handler: UpdateDiscussionStatusHandler
	)
	post /live/update-discussion/:liveHouseName(UpdateDiscussionStatusRequest) returns(UpdateDiscussionStatusResponse)
	
	@doc(
		summary: 直播课堂出勤统计(课程列表)
	)
	@server(
		handler: GetLiveStatisticHandler
	)
	get /live/statistics/show/:token/:liveHouseName(LiveStatisticRequest) returns(LiveStatisticResponse)
	
	@doc(
		summary: 直播课堂出勤统计（消息卡片）
	)
	@server(
		handler: GetLiveStatisticOfClassroomHandler
	)
	get /live/statistics/classroom/:token/:liveId(LiveClassroomStatisticRequest) returns(LiveStatisticItem)
	
	@doc(
		summary: 获取用户的课表
	)
	@server(
		handler: GetUserTimetableHandler
	)
	post /live/user-timetable(GetUserTimetableRequest) returns(GetUserTimetableResponse)
	
	@doc(
		summary: 直播课堂发布(大班模式)
	)
	@server(
		handler: LiveCloudCreateHandler
	)
	post /livecloud/publish(LiveCloudCreateRequest) returns(LiveCloudMessageViewResponse)
}