info(
	title: "信息调查"
	desc: "Group版信息调查"
	author: "duzhongfa"
)

type (
	VerifyCodeRequest {
		Mobile string `path:"mobile"`
	}

	QuestionnaireLoginRequest {
		Mobile             string `json:"mobile"`
		VerificationCode   string `json:"verificationCode,optional"` // 验证码
		CaptchaId          string `json:"captchaId"`
		CaptchaVerifyValue string `json:"captchaVerifyValue"`
	}

	QuestionnaireLoginResponse {
		Tokens *Tokens `json:"tokens,omitempty"`
	}

	Tokens {
		AccessToken   string `json:"access_token"`   // Access token to access the apis
		AccessExpire  int64  `json:"access_expire"`  // Access token expire time, generated like: time.Now().Add(time.Day*14).Unix()
		RefreshToken  string `json:"refresh_token"`  // Refresh token, use this to refresh the token
		RefreshExpire int64  `json:"refresh_expire"` // Refresh token expire time, generated like: time.Now().Add(time.Month).Unix()
		RefreshAfter  int64  `json:"refresh_after"`  // Recommended time to refresh the access token
	}
)

type (
	GetQuestionnaireListRequest {
		Page     int64 `json:"page"`
		PageSize int64 `json:"pageSize"`
	}

	GetQuestionnaireListResponse {
		Total        int64           `json:"total"`
		QuestionList []*QuestionInfo `json:"questionList"`
	}

	QuestionInfo {
		QuestionnaireId string `json:"questionnaireId"`
		Title           string `json:"title"`
		Status          int    `json:"status"` // 1-进行中 2-已结束
		CreateTime      int64  `json:"createTime"`
		EndTime         int64  `json:"endTime"`
		CheckInCount    int64  `json:"checkInCount"`
	}

	GetQuestionnaireInfoResponse {
		QuestionnaireId string      `json:"questionnaireId"`
		EduId           int64       `json:"eduId"`
		Title           string      `json:"title"`
		SubTitle        string      `json:"subTitle"`
		QuestionBody    []*Question `json:"question"`
		CreateTime      int64       `json:"createTime"`
		EndTime         int64       `json:"endTime"`
		CheckInCount    int64       `json:"checkInCount"`
		Status          int         `json:"status"` // 1-进行中 2-已结束
	}

	Question {
		Content        string    `json:"content,optional"`
		Description    string    `json:"description,optional,omitempty"`
		Type           string    `json:"type,optional"`                     // 题目类型 : SINGLE单选题 | MULTIPLE多选 | BLANK填空题 | FILLBLANK插入填空 | ATTACHMENT上传附件
		MustAnswer     bool      `json:"mustAnswer,optional,omitempty"`     // 是否必答
		MaxOptionalNum int       `json:"maxOptionalNum,optional,omitempty"` // 最大可选数量，仅MULTIPLE时设置
		Images         []*Image  `json:"images,optional,omitempty"`
		Blank          string    `json:"blank,optional,omitempty"`
		Options        []*Option `json:"options,optional,omitempty"`
		AttachMentType string    `json:"attachMentType,optional,omitempty"` // 附件类型
		NeedCheck      bool      `json:"needCheck,optional,omitempty"`      // 是否需要修改
	}

	Option {
		Value     string `json:"value,optional"`
		Image     *Image `json:"image,optional,omitempty"`
		NeedBlank bool   `json:"needBlank,optional"`        // 是否添加填空
		IsVote    bool   `json:"isVote,optional,omitempty"` // 是否选择
		Blank     string `json:"blank,optional,omitempty"`
	}

	Image {
		Original  string `json:"original,omitempty,optional"`
		Preview   string `json:"preview,omitempty,optional"`
		Thumbnail string `json:"thumbnail,omitempty,optional"`
		Size      int    `json:"size,omitempty,optional"`
		Height    int    `json:"height,omitempty,optional"`
		Width     int    `json:"width,omitempty,optional"`
	}

	AddQuestionnaireInfoRequest {
		Title        string      `json:"title"`
		SubTitle     string      `json:"subTitle,optional"`
		QuestionBody []*Question `json:"question"`
	}

	EditQuestionnaireInfoRequest {
		QuestionnaireId string      `json:"questionnaireId"`
		Title           string      `json:"title"`
		SubTitle        string      `json:"subTitle,optional"`
		QuestionBody    []*Question `json:"question"`
	}

	QuestionnaireIdPathRequest {
		QuestionnaireId string `path:"questionnaireId"`
	}

	QuestionnaireIdResponse {
		QuestionnaireId string `json:"questionnaireId"`
	}
)

type (
	QuestionnaireStatisticsRequest {
		QuestionnaireId string `json:"questionnaireId"`   // 问卷id
		Keyword         string `json:"keyword,optional"`  // 关键字
		Status          int    `json:"status,optional"`   // 状态：-1-全部 1-已提交 2-需要修改 3-已修改
		Page            int    `json:"page,optional"`     // 当前页
		PageSize        int    `json:"pageSize,optional"` // 展示数量
	}

	QuestionnaireStatisticsResponse {
		Header []*Question `json:"header"` // 表头
		Rows   []*Row      `json:"rows"`
		Count  int         `json:"count"`
	}

	Row {
		RecordId int64       `json:"recordId"`        // 记录id
		Date     int64       `json:"date,optional"`   // 填报时间；秒时间戳
		Mobile   string      `json:"mobile,optional"` // 手机号
		List     []*Question `json:"list"`
	}

	SendEditNoticeRequest {
		List []*Row `json:"list"`
	}

	QuestionnaireDetailResponse {
		QuestionnaireId     string      `json:"questionnaireId"`     // 问卷id
		RecordId            int64       `json:"recordId"`            // 记录id
		Status              int         `json:"status,optional"`     // 状态：0-进行中 1-已提交 2-需要修改 3-已修改
		QuestionnaireStatus int         `json:"questionnaireStatus"` // 问卷状态：1-进行中 2-已结束
		Title               string      `json:"title"`               // 标题
		SubTitle            string      `json:"subTitle"`            // 副标题
		Question            []*Question `json:"question"`            // 问题
	}

	SubmitQuestionnaireRequest {
		QuestionnaireId string      `json:"questionnaireId"` // 问卷id
		RecordId        int64       `json:"recordId"`        // 记录id
		Question        []*Question `json:"question"`        // 问题
	}

	UserQuestionnaireListResponse {
		List []*UserQuestion `json:"list"`
	}

	UserQuestion {
		QuestionnaireId string `json:"questionnaireId"` // 问卷id
		RecordId        int64  `json:"recordId"`        // 记录id
		Title           string `json:"title"`           // 标题
		Status          int    `json:"status"`          // 状态：0-进行中 1-已提交 2-需要修改 3-已修改
	}

	RecordIdPathRequest {
		RecordId int64 `path:"recordId"` // 记录id
	}
)

type (
	XhbUserLoginRequest {
		Token string `path:"token"`
	}
)

service questionnaire {
	@doc "获取调查信息"
	@handler GetQuestionnaireInfoHandler
	get /questionnaire/info/:questionnaireId (QuestionnaireIdPathRequest) returns (GetQuestionnaireInfoResponse)
}

@server(
	jwt: Auth
)
service questionnaire {
	@doc "获取调查列表"
	@handler GetQuestionnaireListHandler
	post /questionnaire/list (GetQuestionnaireListRequest) returns (GetQuestionnaireListResponse)
	
	@doc "新增调查信息"
	@handler AddQuestionnaireInfoHandler
	post /questionnaire/add (AddQuestionnaireInfoRequest) returns (QuestionnaireIdResponse)
	
	@doc "编辑调查信息"
	@handler EditQuestionnaireInfoHandler
	post /questionnaire/edit (EditQuestionnaireInfoRequest) returns (QuestionnaireIdResponse)
	
	@doc "删除调查"
	@handler DeleteQuestionnaireHandler
	post /questionnaire/delete/:questionnaireId (QuestionnaireIdPathRequest)
	
	@doc "结束调查"
	@handler CloseQuestionnaireHandler
	post /questionnaire/close/:questionnaireId (QuestionnaireIdPathRequest)
}

@server(
	jwt: Auth
	group: statistic
)
service questionnaire {
	@doc "查看数据详情"
	@handler QuestionnaireStatisticsHandler
	post /questionnaire/statistics (QuestionnaireStatisticsRequest) returns (QuestionnaireStatisticsResponse)
	
	@doc "导出数据详情"
	@handler QuestionnaireStatisticsExportHandler
	post /questionnaire/statistics/export (QuestionnaireStatisticsRequest)
	
	@doc "发布修改通知"
	@handler SendEditNoticeHandler
	post /questionnaire/notice/edit/send (SendEditNoticeRequest)
	
	@doc "审核通过调查问卷"
	@handler ApproveQuestionnaireHandler
	get /questionnaire/approve/:recordId (RecordIdPathRequest)
}

@server(
	jwt: Auth
	group: h5
)
service questionnaire {
	@doc "获取问卷"
	@handler GetQuestionnaireDetailHandler
	get /questionnaire/h5/detail/:questionnaireId (QuestionnaireIdPathRequest) returns (QuestionnaireDetailResponse)
	
	@doc "提交问卷"
	@handler SubmitQuestionnaireHandler
	post /questionnaire/h5/submit (SubmitQuestionnaireRequest)
	
	@doc "用户问卷列表"
	@handler UserQuestionnaireListHandler
	post /questionnaire/h5/user/questionnaire/list () returns (UserQuestionnaireListResponse)
}

@server(
	group: h5
)
service questionnaire {
	@doc "晓黑板用户免登录"
	@handler XhbUserLoginHandler
	post /questionnaire/h5/xhb-user/login/:token (XhbUserLoginRequest) returns (QuestionnaireLoginResponse)
	
	@doc "发送验证码"
	@handler VerifyCodeHandler
	get /questionnaire/verify-code/:mobile (VerifyCodeRequest)
	
	@doc "信息调查登录"
	@handler QuestionnaireLoginHandler
	post /questionnaire/login (QuestionnaireLoginRequest) returns (QuestionnaireLoginResponse)
}