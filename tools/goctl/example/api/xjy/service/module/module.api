info(
	title: 应用及权限管理
	desc:
	author: wangdi
	email: wangdi@xiaoheiban.cn
)

type (
	CampusModule {
		Id   int64  `json:"id"`   // 模块id
		Code string `json:"code"` // applicationId
		Name string `json:"name"` // 应用名称
		Icon string `json:"icon"` // 应用图标
		Desc string `json:"desc"` // 应用描述
	}

	CampusModuleGroup {
		Name string          `json:"name"`
		List []*CampusModule `json:"list"`
	}

	GetCampusModuleRequest {
		TeacherId int64 `json:"teacherId,optional"` // 已选中教师id,不填则获取学校所有
	}
	GetCampusModuleResponse {
		Group []*CampusModuleGroup `json:"group"`
	}

	Module {
		Id   int64  `json:"id"`   // 模块id
		Code string `json:"code"` // applicationId
		Name string `json:"name"` // 应用名称
		Icon string `json:"icon"` // 应用图标
		Desc string `json:"desc"` // 应用描述
	}

	ModuleResponse {
		List []*Module `json:"list"`
	}

	// 菜单icon
	MenuIcon {
		Normal   string `json:"icon"`
		Selected string `json:"iconChoose,optional"`
	}

	ChildMenu {
		Name  string `json:"title"` // 应用名称
		Route string `json:"url"`   // 路由
	}
	// 菜单项
	CampusMenuItem {
		Id   int64  `json:"id"` // 菜单id
		Name string `json:"title"`
		MenuIcon
		Route        string       `json:"url"`          // 路由
		HaveChildren bool         `json:"haveChildren"` // 是否有子页面
		Children     []*ChildMenu `json:"children"`
	}
	GetCampusMenuResponse {
		List []*CampusMenuItem `json:"list"`
	}

	AdminListRequest {
		SearchType int    `json:"searchType"`          // 搜索类型：1-姓名模糊搜索；2-手机号精确搜索
		KeyWord    string `json:"keyWord,optional"`    // 搜索内容
		Page       int    `json:"page,default=1"`      // 当前页
		PageSize   int    `json:"pageSize,default=12"` // 当前显示数量
	}

	AdminListResponse {
		List  []*AdminView `json:"list"`
		Count int          `json:"count"`
	}

	AdminView {
		TeacherId int64  `json:"teacherId"`         // 教师id
		Name      string `json:"name"`              // 教师姓名
		Mobile    string `json:"mobile"`            // 手机号
		Module    string `json:"module,omitempty"`  // 拥有权限
		Creator   string `json:"creator,omitempty"` // 创建人
		IsManager bool   `json:"isManager"`         // 用来判断是否拥有转让功能：true-是；false-否
	}

	TeacherId {
		TeacherId int64 `json:"teacherId"`
	}

	PathTeacherId {
		TeacherId int64 `path:"teacherId"`
	}

	AddAdminRequest {
		TeacherIds []int64 `json:"teacherIds"`      // 教师ids
		ModuleIds  []int64 `json:"moduleIds"`       // 功能ids
		Policy     *Policy `json:"policy,optional"` // 组织架构权限
	}

	Policy {
		Codes []string `json:"codes,omitempty"`          // 权限codes
		Type  string   `json:"type,omitempty"`           // 管辖范围：*-全校；OPTION_GRADE-指定年级；OPTION_CLASS-指定班级
		Scope []int64  `json:"scope,optional,omitempty"` // 全校为空；指定年级存入campusGradeId；指定班级存入classId
	}

	AdminRequest {
		TeacherId int64   `json:"teacherId"`                 // 教师id
		ModuleIds []int64 `json:"moduleIds"`                 // 功能ids
		Policy    *Policy `json:"policy,optional,omitempty"` // 组织架构权限
	}

	AllArchitecturePolicyRequest {
		Type string `json:"type"` // 管辖范围：*-全校；OPTION_GRADE-指定年级；OPTION_CLASS-指定班级
	}

	AllArchitecturePolicyResponse {
		List []*ArchitecturePolicyView `json:"list"`
	}

	ArchitecturePolicyView {
		Name     string                    `json:"name"`               // 权限名
		Code     string                    `json:"code,omitempty"`     // 权限code
		Desc     []string                  `json:"desc,omitempty"`     // 描述
		Children []*ArchitecturePolicyView `json:"children,omitempty"` // 子类
	}

	TeacherItem {
		Id     int64  `json:"id"`
		Name   string `json:"name"`
		Mobile string `json:"mobile"`
	}
	SuperAdminTeacherRequest {
		Keyword string `form:"keyword,optional"`
		Type    int    `form:"type"` // 搜索类型，0：转让人，1：超级管理员
	}
	SuperAdminTeacherResponse {
		List []*TeacherItem `json:"list"` // 教师列表
	}

	AdminTeacherItem {
		Id   int64          `json:"id"`   // 部门id
		Name string         `json:"name"` // 部门名称
		List []*TeacherItem `json:"list"`
	}

	AdminTeacherResponse {
		DepartmentArchList []*AdminTeacherItem `json:"departmentArchList"` // 部门架构中教师列表
		OrderList          []*TeacherItem      `json:"orderList"`          // 教师花名册
	}

	AdminDetailRequest {
		TeacherId int64       `json:"teacherId"`        // 教师id
		Name      string      `json:"name"`             // 教师姓名
		ModuleIds []int64     `json:"moduleIds"`        // 功能ids
		Policy    *PolicyView `json:"policy,omitempty"` // 组织架构权限
	}

	PolicyView {
		Codes []string `json:"codes,omitempty"` // 权限codes
		Type  string   `json:"type,omitempty"`  // 管辖范围：*-全校；OPTION_GRADE-指定年级；OPTION_CLASS-指定班级
		Scope []*Scope `json:"scope,omitempty"` // 全校为空；指定年级存入campusGradeId；指定班级存入classId
	}

	Scope {
		Id   int64  `json:"id"`   // campusGradeId；classId
		Name string `json:"name"` // campusGradeName；className
	}

	UserRoleResponse {
		Role string `json:"role"` // ADMIN-管理员｜SUPER-ADMIN超级管理员|MANAGER-创建人
	}

	UserModulePoliciesRequest {
		ModuleCode string `path:"mcode"`
	}

	UserModulePoliciesResponse {
		List []*SubModule `json:"list"`
	}

	SubModule {
		Keys          []interface{}      `json:"-"` //TODO
		Policies      []*SubModulePolicy `json:"policies"`
		SubModuleName string             `json:"subModuleName"`
	}

	SubModulePolicy {
		Keys       []interface{} `json:"-"`          //TODO
		PolicyAuth bool          `json:"policyAuth"` // 是否拥有该项权限
		PolicyCode string        `json:"policyCode"`
		PolicyName string        `json:"policyName"`
		PolicyDesc []string      `json:"policyDesc"`
	}

	UserPolicyCodesRequest {
	}

	UserPolicyCodesResponse {
		PolicyCodes []string `json:"policyCodes"`
	}
)

@server(
	jwt: XjyAuth
	folder: campus
)
service module-api {
	@doc(
		summary: 根据教师获取学校已购买的功能列表(权限管理页面)
	)
	@server(
		handler: getCampusModule
	)
	get /module/campus/module/list(GetCampusModuleRequest) returns(GetCampusModuleResponse)
	
	@doc(
		summary: 获取用户侧面菜单栏
	)
	@server(
		handler: getCampusMenu
	)
	get /module/campus/menu/list() returns(GetCampusMenuResponse)
	
	@doc(
		summary: 获取超级管理员｜转让人选择列表
	)
	@server(
		handler: getSuperAdminUsers
	)
	get /module/super/admin/user/list(SuperAdminTeacherRequest) returns(SuperAdminTeacherResponse)
	
	@doc(
		summary: 获取管理员选择列表
	)
	@server(
		handler: getAdminUsers
	)
	get /module/admin/user/list() returns(AdminTeacherResponse)
	
	@doc(
		summary: 获取超级管理员列表
	)
	@server(
		handler: superAdminListHandler
	)
	post /module/campus/super-admin/list(AdminListRequest) returns(AdminListResponse)
	
	@doc(
		summary: 转让超级管理员
	)
	@server(
		handler: transferSuperAdminHandler
	)
	post /module/campus/super-admin/transfer(TeacherId)
	
	@doc(
		summary: 新增超级管理员
	)
	@server(
		handler: addSuperAdminHandler
	)
	post /module/campus/super-admin/add(TeacherId)
	
	@doc(
		summary: 删除超级管理员/管理员
	)
	@server(
		handler: deleteAdminHandler
	)
	post /module/campus/admin/delete(TeacherId)
	
	@doc(
		summary: 获取管理员列表
	)
	@server(
		handler: adminListHandler
	)
	post /module/campus/admin/list(AdminListRequest) returns(AdminListResponse)
	
	@doc(
		summary: 新增管理员
	)
	@server(
		handler: addAdminHandler
	)
	post /module/campus/admin/add(AddAdminRequest)
	
	@doc(
		summary: 管理员详情
	)
	@server(
		handler: adminDetailHandler
	)
	get /module/campus/admin/detail/:teacherId(PathTeacherId) returns(AdminDetailRequest)
	
	@doc(
		summary: 修改管理员
	)
	@server(
		handler: editAdminHandler
	)
	post /module/campus/admin/edit(AdminRequest)
	
	@doc(
		summary: 获取所有组织结构权限
	)
	@server(
		handler: allArchitecturePolicyHandler
	)
	post /module/campus/architecture-policy/all(AllArchitecturePolicyRequest) returns(AllArchitecturePolicyResponse)
	
	@doc(
		summary: 获取当前用户身份
	)
	@server(
		handler: userRoleHandler
	)
	get /module/user/role() returns(UserRoleResponse)
	
	@doc(
		summary: "【暂时保留】获取当前用户在应用内的数据权限，说明：目前组织架构的 module 是 architecture"
	)
	@server(
		handler: userModulePoliciesHandler
	)
	get /module/auth/:mcode/data/policy(UserModulePoliciesRequest) returns(UserModulePoliciesResponse)
	
	@doc(
		summary: 获取当前用户所有权限码
	)
	@server(
		handler: userPolicyCodesHandler
	)
	get /module/auth/user/policies(UserPolicyCodesRequest) returns(UserPolicyCodesResponse)
}