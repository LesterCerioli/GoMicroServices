// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package api

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ApiParserLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var apiparserlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func apiparserlexerLexerInit() {
	staticData := &apiparserlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'='", "'('", "')'", "'{'", "'}'", "'*'", "'time.Time'", "'['",
		"']'", "'returns'", "'-'", "'/'", "'/:'", "'/*'", "'@doc'", "'@handler'",
		"'interface{}'", "'@server'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ATDOC",
		"ATHANDLER", "INTERFACE", "ATSERVER", "WS", "COMMENT", "LINE_COMMENT",
		"STRING", "RAW_STRING", "LINE_VALUE", "ID", "LetterOrDigit",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "ATDOC", "ATHANDLER", "INTERFACE",
		"ATSERVER", "WS", "COMMENT", "LINE_COMMENT", "STRING", "RAW_STRING",
		"LINE_VALUE", "ID", "LetterOrDigit", "ExponentPart", "EscapeSequence",
		"HexDigits", "HexDigit", "Digits", "Letter",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 26, 279, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,
		1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		1, 17, 1, 17, 1, 18, 4, 18, 145, 8, 18, 11, 18, 12, 18, 146, 1, 18, 1,
		18, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 155, 8, 19, 10, 19, 12, 19, 158,
		9, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 5,
		20, 169, 8, 20, 10, 20, 12, 20, 172, 9, 20, 1, 20, 1, 20, 1, 21, 1, 21,
		1, 21, 5, 21, 179, 8, 21, 10, 21, 12, 21, 182, 9, 21, 1, 21, 1, 21, 1,
		22, 1, 22, 1, 22, 4, 22, 189, 8, 22, 11, 22, 12, 22, 190, 1, 22, 1, 22,
		1, 23, 1, 23, 5, 23, 197, 8, 23, 10, 23, 12, 23, 200, 9, 23, 1, 23, 1,
		23, 5, 23, 204, 8, 23, 10, 23, 12, 23, 207, 9, 23, 3, 23, 209, 8, 23, 1,
		24, 1, 24, 5, 24, 213, 8, 24, 10, 24, 12, 24, 216, 9, 24, 1, 25, 1, 25,
		3, 25, 220, 8, 25, 1, 26, 1, 26, 3, 26, 224, 8, 26, 1, 26, 1, 26, 1, 27,
		1, 27, 1, 27, 1, 27, 3, 27, 232, 8, 27, 1, 27, 3, 27, 235, 8, 27, 1, 27,
		1, 27, 1, 27, 4, 27, 240, 8, 27, 11, 27, 12, 27, 241, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 3, 27, 249, 8, 27, 1, 28, 1, 28, 1, 28, 5, 28, 254, 8,
		28, 10, 28, 12, 28, 257, 9, 28, 1, 28, 3, 28, 260, 8, 28, 1, 29, 1, 29,
		1, 30, 1, 30, 5, 30, 266, 8, 30, 10, 30, 12, 30, 269, 9, 30, 1, 30, 3,
		30, 272, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 278, 8, 31, 1, 156,
		0, 32, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10,
		21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19,
		39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 0, 55, 0, 57,
		0, 59, 0, 61, 0, 63, 0, 1, 0, 18, 3, 0, 9, 10, 12, 13, 32, 32, 2, 0, 10,
		10, 13, 13, 2, 0, 34, 34, 92, 92, 4, 0, 10, 10, 13, 13, 92, 92, 96, 96,
		2, 0, 9, 9, 32, 32, 4, 0, 10, 10, 13, 13, 34, 34, 96, 96, 1, 0, 48, 57,
		2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 8, 0, 34, 34, 39, 39, 92,
		92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 1, 0, 48, 51, 1, 0,
		48, 55, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0, 48, 57, 95, 95, 4, 0, 36,
		36, 65, 90, 95, 95, 97, 122, 2, 0, 0, 127, 55296, 56319, 1, 0, 55296, 56319,
		1, 0, 56320, 57343, 297, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0,
		0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1,
		0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21,
		1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0,
		29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0,
		0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0,
		0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0,
		0, 0, 1, 65, 1, 0, 0, 0, 3, 67, 1, 0, 0, 0, 5, 69, 1, 0, 0, 0, 7, 71, 1,
		0, 0, 0, 9, 73, 1, 0, 0, 0, 11, 75, 1, 0, 0, 0, 13, 77, 1, 0, 0, 0, 15,
		87, 1, 0, 0, 0, 17, 89, 1, 0, 0, 0, 19, 91, 1, 0, 0, 0, 21, 99, 1, 0, 0,
		0, 23, 101, 1, 0, 0, 0, 25, 103, 1, 0, 0, 0, 27, 106, 1, 0, 0, 0, 29, 109,
		1, 0, 0, 0, 31, 114, 1, 0, 0, 0, 33, 123, 1, 0, 0, 0, 35, 135, 1, 0, 0,
		0, 37, 144, 1, 0, 0, 0, 39, 150, 1, 0, 0, 0, 41, 164, 1, 0, 0, 0, 43, 175,
		1, 0, 0, 0, 45, 185, 1, 0, 0, 0, 47, 194, 1, 0, 0, 0, 49, 210, 1, 0, 0,
		0, 51, 219, 1, 0, 0, 0, 53, 221, 1, 0, 0, 0, 55, 248, 1, 0, 0, 0, 57, 250,
		1, 0, 0, 0, 59, 261, 1, 0, 0, 0, 61, 263, 1, 0, 0, 0, 63, 277, 1, 0, 0,
		0, 65, 66, 5, 61, 0, 0, 66, 2, 1, 0, 0, 0, 67, 68, 5, 40, 0, 0, 68, 4,
		1, 0, 0, 0, 69, 70, 5, 41, 0, 0, 70, 6, 1, 0, 0, 0, 71, 72, 5, 123, 0,
		0, 72, 8, 1, 0, 0, 0, 73, 74, 5, 125, 0, 0, 74, 10, 1, 0, 0, 0, 75, 76,
		5, 42, 0, 0, 76, 12, 1, 0, 0, 0, 77, 78, 5, 116, 0, 0, 78, 79, 5, 105,
		0, 0, 79, 80, 5, 109, 0, 0, 80, 81, 5, 101, 0, 0, 81, 82, 5, 46, 0, 0,
		82, 83, 5, 84, 0, 0, 83, 84, 5, 105, 0, 0, 84, 85, 5, 109, 0, 0, 85, 86,
		5, 101, 0, 0, 86, 14, 1, 0, 0, 0, 87, 88, 5, 91, 0, 0, 88, 16, 1, 0, 0,
		0, 89, 90, 5, 93, 0, 0, 90, 18, 1, 0, 0, 0, 91, 92, 5, 114, 0, 0, 92, 93,
		5, 101, 0, 0, 93, 94, 5, 116, 0, 0, 94, 95, 5, 117, 0, 0, 95, 96, 5, 114,
		0, 0, 96, 97, 5, 110, 0, 0, 97, 98, 5, 115, 0, 0, 98, 20, 1, 0, 0, 0, 99,
		100, 5, 45, 0, 0, 100, 22, 1, 0, 0, 0, 101, 102, 5, 47, 0, 0, 102, 24,
		1, 0, 0, 0, 103, 104, 5, 47, 0, 0, 104, 105, 5, 58, 0, 0, 105, 26, 1, 0,
		0, 0, 106, 107, 5, 47, 0, 0, 107, 108, 5, 42, 0, 0, 108, 28, 1, 0, 0, 0,
		109, 110, 5, 64, 0, 0, 110, 111, 5, 100, 0, 0, 111, 112, 5, 111, 0, 0,
		112, 113, 5, 99, 0, 0, 113, 30, 1, 0, 0, 0, 114, 115, 5, 64, 0, 0, 115,
		116, 5, 104, 0, 0, 116, 117, 5, 97, 0, 0, 117, 118, 5, 110, 0, 0, 118,
		119, 5, 100, 0, 0, 119, 120, 5, 108, 0, 0, 120, 121, 5, 101, 0, 0, 121,
		122, 5, 114, 0, 0, 122, 32, 1, 0, 0, 0, 123, 124, 5, 105, 0, 0, 124, 125,
		5, 110, 0, 0, 125, 126, 5, 116, 0, 0, 126, 127, 5, 101, 0, 0, 127, 128,
		5, 114, 0, 0, 128, 129, 5, 102, 0, 0, 129, 130, 5, 97, 0, 0, 130, 131,
		5, 99, 0, 0, 131, 132, 5, 101, 0, 0, 132, 133, 5, 123, 0, 0, 133, 134,
		5, 125, 0, 0, 134, 34, 1, 0, 0, 0, 135, 136, 5, 64, 0, 0, 136, 137, 5,
		115, 0, 0, 137, 138, 5, 101, 0, 0, 138, 139, 5, 114, 0, 0, 139, 140, 5,
		118, 0, 0, 140, 141, 5, 101, 0, 0, 141, 142, 5, 114, 0, 0, 142, 36, 1,
		0, 0, 0, 143, 145, 7, 0, 0, 0, 144, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0,
		0, 146, 144, 1, 0, 0, 0, 146, 147, 1, 0, 0, 0, 147, 148, 1, 0, 0, 0, 148,
		149, 6, 18, 0, 0, 149, 38, 1, 0, 0, 0, 150, 151, 5, 47, 0, 0, 151, 152,
		5, 42, 0, 0, 152, 156, 1, 0, 0, 0, 153, 155, 9, 0, 0, 0, 154, 153, 1, 0,
		0, 0, 155, 158, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 156, 154, 1, 0, 0, 0,
		157, 159, 1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 159, 160, 5, 42, 0, 0, 160,
		161, 5, 47, 0, 0, 161, 162, 1, 0, 0, 0, 162, 163, 6, 19, 1, 0, 163, 40,
		1, 0, 0, 0, 164, 165, 5, 47, 0, 0, 165, 166, 5, 47, 0, 0, 166, 170, 1,
		0, 0, 0, 167, 169, 8, 1, 0, 0, 168, 167, 1, 0, 0, 0, 169, 172, 1, 0, 0,
		0, 170, 168, 1, 0, 0, 0, 170, 171, 1, 0, 0, 0, 171, 173, 1, 0, 0, 0, 172,
		170, 1, 0, 0, 0, 173, 174, 6, 20, 1, 0, 174, 42, 1, 0, 0, 0, 175, 180,
		5, 34, 0, 0, 176, 179, 8, 2, 0, 0, 177, 179, 3, 55, 27, 0, 178, 176, 1,
		0, 0, 0, 178, 177, 1, 0, 0, 0, 179, 182, 1, 0, 0, 0, 180, 178, 1, 0, 0,
		0, 180, 181, 1, 0, 0, 0, 181, 183, 1, 0, 0, 0, 182, 180, 1, 0, 0, 0, 183,
		184, 5, 34, 0, 0, 184, 44, 1, 0, 0, 0, 185, 188, 5, 96, 0, 0, 186, 189,
		8, 3, 0, 0, 187, 189, 3, 55, 27, 0, 188, 186, 1, 0, 0, 0, 188, 187, 1,
		0, 0, 0, 189, 190, 1, 0, 0, 0, 190, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0,
		0, 191, 192, 1, 0, 0, 0, 192, 193, 5, 96, 0, 0, 193, 46, 1, 0, 0, 0, 194,
		198, 5, 58, 0, 0, 195, 197, 7, 4, 0, 0, 196, 195, 1, 0, 0, 0, 197, 200,
		1, 0, 0, 0, 198, 196, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199, 208, 1, 0,
		0, 0, 200, 198, 1, 0, 0, 0, 201, 209, 3, 43, 21, 0, 202, 204, 8, 5, 0,
		0, 203, 202, 1, 0, 0, 0, 204, 207, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 205,
		206, 1, 0, 0, 0, 206, 209, 1, 0, 0, 0, 207, 205, 1, 0, 0, 0, 208, 201,
		1, 0, 0, 0, 208, 205, 1, 0, 0, 0, 209, 48, 1, 0, 0, 0, 210, 214, 3, 63,
		31, 0, 211, 213, 3, 51, 25, 0, 212, 211, 1, 0, 0, 0, 213, 216, 1, 0, 0,
		0, 214, 212, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 50, 1, 0, 0, 0, 216,
		214, 1, 0, 0, 0, 217, 220, 3, 63, 31, 0, 218, 220, 7, 6, 0, 0, 219, 217,
		1, 0, 0, 0, 219, 218, 1, 0, 0, 0, 220, 52, 1, 0, 0, 0, 221, 223, 7, 7,
		0, 0, 222, 224, 7, 8, 0, 0, 223, 222, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0,
		224, 225, 1, 0, 0, 0, 225, 226, 3, 61, 30, 0, 226, 54, 1, 0, 0, 0, 227,
		228, 5, 92, 0, 0, 228, 249, 7, 9, 0, 0, 229, 234, 5, 92, 0, 0, 230, 232,
		7, 10, 0, 0, 231, 230, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 233, 1, 0,
		0, 0, 233, 235, 7, 11, 0, 0, 234, 231, 1, 0, 0, 0, 234, 235, 1, 0, 0, 0,
		235, 236, 1, 0, 0, 0, 236, 249, 7, 11, 0, 0, 237, 239, 5, 92, 0, 0, 238,
		240, 5, 117, 0, 0, 239, 238, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 239,
		1, 0, 0, 0, 241, 242, 1, 0, 0, 0, 242, 243, 1, 0, 0, 0, 243, 244, 3, 59,
		29, 0, 244, 245, 3, 59, 29, 0, 245, 246, 3, 59, 29, 0, 246, 247, 3, 59,
		29, 0, 247, 249, 1, 0, 0, 0, 248, 227, 1, 0, 0, 0, 248, 229, 1, 0, 0, 0,
		248, 237, 1, 0, 0, 0, 249, 56, 1, 0, 0, 0, 250, 259, 3, 59, 29, 0, 251,
		254, 3, 59, 29, 0, 252, 254, 5, 95, 0, 0, 253, 251, 1, 0, 0, 0, 253, 252,
		1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0,
		0, 0, 256, 258, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 260, 3, 59, 29,
		0, 259, 255, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 58, 1, 0, 0, 0, 261,
		262, 7, 12, 0, 0, 262, 60, 1, 0, 0, 0, 263, 271, 7, 6, 0, 0, 264, 266,
		7, 13, 0, 0, 265, 264, 1, 0, 0, 0, 266, 269, 1, 0, 0, 0, 267, 265, 1, 0,
		0, 0, 267, 268, 1, 0, 0, 0, 268, 270, 1, 0, 0, 0, 269, 267, 1, 0, 0, 0,
		270, 272, 7, 6, 0, 0, 271, 267, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272,
		62, 1, 0, 0, 0, 273, 278, 7, 14, 0, 0, 274, 278, 8, 15, 0, 0, 275, 276,
		7, 16, 0, 0, 276, 278, 7, 17, 0, 0, 277, 273, 1, 0, 0, 0, 277, 274, 1,
		0, 0, 0, 277, 275, 1, 0, 0, 0, 278, 64, 1, 0, 0, 0, 24, 0, 146, 156, 170,
		178, 180, 188, 190, 198, 205, 208, 214, 219, 223, 231, 234, 241, 248, 253,
		255, 259, 267, 271, 277, 2, 0, 1, 0, 0, 88, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ApiParserLexerInit initializes any static state used to implement ApiParserLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewApiParserLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ApiParserLexerInit() {
	staticData := &apiparserlexerLexerStaticData
	staticData.once.Do(apiparserlexerLexerInit)
}

// NewApiParserLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewApiParserLexer(input antlr.CharStream) *ApiParserLexer {
	ApiParserLexerInit()
	l := new(ApiParserLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &apiparserlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "ApiParser.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ApiParserLexer tokens.
const (
	ApiParserLexerT__0          = 1
	ApiParserLexerT__1          = 2
	ApiParserLexerT__2          = 3
	ApiParserLexerT__3          = 4
	ApiParserLexerT__4          = 5
	ApiParserLexerT__5          = 6
	ApiParserLexerT__6          = 7
	ApiParserLexerT__7          = 8
	ApiParserLexerT__8          = 9
	ApiParserLexerT__9          = 10
	ApiParserLexerT__10         = 11
	ApiParserLexerT__11         = 12
	ApiParserLexerT__12         = 13
	ApiParserLexerT__13         = 14
	ApiParserLexerATDOC         = 15
	ApiParserLexerATHANDLER     = 16
	ApiParserLexerINTERFACE     = 17
	ApiParserLexerATSERVER      = 18
	ApiParserLexerWS            = 19
	ApiParserLexerCOMMENT       = 20
	ApiParserLexerLINE_COMMENT  = 21
	ApiParserLexerSTRING        = 22
	ApiParserLexerRAW_STRING    = 23
	ApiParserLexerLINE_VALUE    = 24
	ApiParserLexerID            = 25
	ApiParserLexerLetterOrDigit = 26
)

const COMEMNTS = 88
